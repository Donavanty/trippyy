{"version":3,"sources":["Components/Map.jsx","store/utility.js","store/actions/actions.js","store/actions/actionTypes.js","Components/navBar.jsx","Components/StartComponents/Calendar.jsx","Components/StartComponents/Autocomplete.jsx","Components/StartComponents/InputForm.jsx","Containers/StartPage.jsx","Containers/Login.jsx","Containers/Signup.jsx","Containers/MyTrips.jsx","Components/Activity.jsx","Components/ActivityList.jsx","Components/SelectedActivityList.jsx","Containers/Shopping.jsx","Components/Timetable.jsx","Containers/Results.jsx","routes.js","store/reducers/reducer.js","index.js"],"names":["ref","updateObject","oldObject","updatedProperties","DATABASE_URL","authSuccess","token","username","userId","type","authFail","error","authLogin","password","dispatch","axios","post","then","res","data","id","user","localStorage","setItem","JSON","stringify","catch","err","authCheckState","parse","getItem","undefined","removeItem","newTrip","tripCountry","tripLat","tripLng","startDate","endDate","destination","tripName","headers","Authorization","console","log","trip","newTripData","checkTrip","activitiesLoadData","url","dataType","get","nextPageToken","results","i","length","includes","newPlace","added","activitiesShown","alert","itineraryLoadData","iti","itinerary","getItineraryLoading","NavBar","className","to","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","this","props","isAuthenticated","Fragment","onClick","logout","pathname","state","from","Component","connect","clear","Calendar","focusedInput","startDateId","endDateId","onDatesChange","setState","updateDates","format","onFocusChange","Autocomplete","handleChange","address","updateCountry","handleSelect","geocodeByAddress","getLatLng","latLng","searchOptions","types","value","onChange","onSelect","highlightFirstSuggestion","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","InputForm","newTripCreated","goToShoppingPage","countryName","event","preventDefault","prevProps","prevState","snapshot","history","push","onSubmit","name","Spinner","animation","role","actions","StartPage","onTryAutoSignup","location","Login","handleSubmit","onAuth","target","Signup","email","password1","password2","MyTrips","tripIDs","trips","local_loading","loadTrips","index","key","getBoundsRadius","bounds","ne_lat","getNorthEast","lat","ne_lng","lng","c_lat","getCenter","c_lng","Math","acos","sin","cos","Map","center","startCenter","zoom","startZoom","startBounds","showInfoWindow","currentInfoWindow","uponBoundsChanged","newBounds","getBounds","test","mapBoundsChange","getZoom","mapReset","fitBounds","mapLoaded","WrappedMap","withScriptjs","withGoogleMap","mapRef","defaultZoom","defaultCenter","onZoomChanged","onDragEnd","onTilesLoaded","children","markerClickHandler","googleMapURL","loadingElement","height","containerElement","mapElement","currentList","position","geometry","label","firstActivityCounter","toString","onCloseClick","activitiesAdded","icon","defaultProps","Activity","activityClass","activityClickHandlerToSubtract","displayIndex","activityClickHandlerToAdd","API_KEY","ActivityList","activities","localLoading","items","isScrolling","activitiesAdd","activitiesSubtract","loadNext","refs","myscroll","scrollTop","isLastPage","hasNextPageLoaded","pageNumber","activitiesLoad","next_page_token","loadPrev","isFirstPage","changeCategory","query","convertSpaceToPlus","text","replace","activitiesLoading","Button","variant","SelectedActivityList","getItinerary","lengthOfTrip","itineraryLoad","closeModal","open","Shopping","Timetable","fromIndex","fromDayIndex","onDragStart","dataset","dayindex","onDragOver","toIndex","toDayIndex","itineraryUpdate","onDrop","data-index","data-dayindex","draggable","bgcolor","Results","BaseRoute","exact","path","component","initialState","authStart","action","authLogout","updateBounds","newMap","newFullList","fullList","pageLoadedUpTo","newCurrentList","activitiesStart","currentTrip","activityAdded","activitiesShownCurrentList","activitiesShownFullList","activitySelected","pop","itineraryStart","currentIti","fromDay","toDay","fromActivity","splice","reducer","composeEnhances","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15ba3731.chunk.js","sourcesContent":["// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,\n    InfoWindow\n} from \"react-google-maps\";\n\nlet ref\n\n\n// Given bounds, gets radius.\nfunction getBoundsRadius(bounds){\n    // r = radius of the earth in km\n    var r = 6378.8\n    // degrees to radians (divide by 57.2958)\n    var ne_lat = bounds.getNorthEast().lat() / 57.2958\n    var ne_lng = bounds.getNorthEast().lng() / 57.2958\n    var c_lat = bounds.getCenter().lat() / 57.2958\n    var c_lng = bounds.getCenter().lng() / 57.2958\n    // distance = circle radius from center to Northeast corner of bounds\n    var r_km = r * Math.acos(\n    Math.sin(c_lat) * Math.sin(ne_lat) + \n    Math.cos(c_lat) * Math.cos(ne_lat) * Math.cos(ne_lng - c_lng)\n    )\n    return r_km *1000 // radius in meters\n}\n\n/**\n * Component, renders Google Map.\n * @memberof Component\n * @param {ReduxAction} mapBoundsChange: to update redux state object (Map) when changing Google Map bounds with new bounds\n * @param {ReduxState} trip: Contains information about current trip (e.g. trip name/date, and list of current activities added)\n * @param {ReduxState} map: Contains map information (e.g. lng/lat of center, and bounds)\n * @param {ReduxAction} activitiesShown: Contains information about the list of activities currently rendered\n * @returns Rendered Google Map with Markers of activities shown, and activities added.\n */\nclass Map extends Component{\n\n    state = {\n        trip: null,\n\n        center: 0,\n        startCenter: 0,\n        zoom: 0,\n        startZoom: 0,\n\n        startBounds: null,\n\n        showInfoWindow: false,\n        currentInfoWindow: 0,\n    }\n    componentDidMount() {\n        if (localStorage.trip !== undefined) {\n            this.setState({\n                startCenter: JSON.parse(localStorage.trip),\n                center: JSON.parse(localStorage.trip),\n                startZoom: 12,\n                zoom: 12\n            })            \n        }\n    }\n\n    static defaultProps = {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyB-tj53yeTQiKnUmi_Jr2a7caz5RJVY60Y&v=3.exp&libraries=geometry,drawing,places\",\n    }\n\n    /**\n     * Called upon moving the map.\n     * Updates the new bounds of the map to redux-state map.\n     * @param {mapBoundsChange} Redux-action: to update redux state object (Map) when changing Google Map bounds with new bounds\n     */\n    uponBoundsChanged = () => {\n        const newBounds = ref.getBounds()\n        if (this.state.test === null) {\n            this.setState({test: newBounds})\n        }\n        const bounds = {\n            \"upper\": {\n                \"lat\": newBounds[\"Ya\"][\"j\"],\n                \"lng\": newBounds[\"Ua\"][\"j\"],\n            },\n\n            \"lower\": {\n                \"lat\": newBounds[\"Ya\"][\"i\"],\n                \"lng\": newBounds[\"Ua\"][\"i\"],\n            },\n\n            \"center\": ref.getCenter(),\n\n            \"radius\": getBoundsRadius(newBounds),\n        }\n\n        //Updates new bounds to Redux\n        this.props.mapBoundsChange(bounds);\n\n        //Updates zoom and center to local state.\n        this.setState({zoom: ref.getZoom()});\n        this.setState({center: ref.getCenter()});\n\n    }\n\n    /**\n     * Called upon clicking button to reset map view to starting stage.\n     * Zooms out the map to default stage. \n     */\n    mapReset = () => {\n        //When fitbounds is called, zoom will be set to StartZoom - 1\n        ref.fitBounds(this.state.startBounds);\n        this.uponBoundsChanged();\n\n    }\n\n    /**\n     * Called upon first load of map.\n     * Updates local state of bounds, and subsequently the redux-state by calling uponBoundsChanged\n     */\n    mapLoaded = () => {\n        console.log(\"map loaded!\")\n        if (this.state.startBounds === null) {\n            this.setState({startBounds: ref.getBounds()})\n        }\n        this.uponBoundsChanged();\n    }\n    //First load, thus need to use local storage.\n    WrappedMap = withScriptjs(withGoogleMap(props =>\n        <GoogleMap\n          // Binds GoogleMap to ref, such that in getting info from maps will be easier\n          ref={(mapRef) => ref = mapRef}\n          \n          defaultZoom={this.state.startZoom}\n          defaultCenter={this.state.startCenter}\n          \n          // Custom add-ons to props\n          onZoomChanged = {this.uponBoundsChanged}\n          onDragEnd = {this.uponBoundsChanged}\n          onTilesLoaded={this.mapLoaded}\n\n          zoom = {this.state.zoom}\n          center = {this.state.center}\n        >\n            {props.children}\n        </GoogleMap>\n      ));\n\n    markerClickHandler = (event, index) => {\n        this.setState({showInfoWindow: true})\n        this.setState({currentInfoWindow: index})\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <button onClick={this.mapReset}> Reset </button>\n\n                <this.WrappedMap\n                    googleMapURL={this.props.googleMapURL}\n                    loadingElement={<div style={{ height: `100%` }} />}\n                    containerElement={<div style={{ height: `85vh` }} />}\n                    mapElement={<div style={{ height: `100%` }} />}\n                >\n                 \n                    { \n                        this.props.activitiesShown.currentList.map((value,index) => \n                            (!value.added) && <Marker key={index} position = {value.geometry.location} label={(this.props.activitiesShown.firstActivityCounter + index + 1).toString()}\n                                    onClick = {(event) => this.markerClickHandler(event, index)}>\n\n                                    {this.state.showInfoWindow && (this.state.currentInfoWindow === index) && \n                                        (<InfoWindow onCloseClick= {() => this.setState({showInfoWindow: false})}> \n                                            <span>{value.name}</span> \n                                        </InfoWindow> )\n                                    }\n\n                                </Marker> )\n\n                    }\n\n                    {\n                        this.props.trip.activitiesAdded.map((value,index) => \n                            <Marker key={index} position = {value.geometry.location} label={(this.props.activitiesShown.firstActivityCounter + index + 1).toString()}\n                                onClick = {(event) => this.markerClickHandler(event, index)} icon =\"http://maps.google.com/mapfiles/ms/icons/blue.png\">\n\n                                {this.state.showInfoWindow && (this.state.currentInfoWindow === index) && \n                                    (<InfoWindow onCloseClick= {() => this.setState({showInfoWindow: false})}> \n                                        <span>{value.name}</span> \n                                    </InfoWindow> )\n                                }\n\n                            </Marker> )\n\n                    }\n\n                </this.WrappedMap>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        trip: state.trip,\n        map: state.map,\n        activitiesShown: state.activitiesShown\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        mapBoundsChange: (bounds) => dispatch(actions.mapBoundsChange(bounds)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);","export const updateObject = (oldObject, updatedProperties) => {\n\treturn {\n\t\t...oldObject,\n\t\t...updatedProperties\n\t}\n}\n//Takes in oldObject, replaces the properties\n","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport {updateObject} from '../utility';\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"\n\n/**\n *\n * Sends an action to reducer to change loading to true.\n * @memberof ReduxAction\n */\nexport const authStart = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\n/** \n* Sends an action to reducer to update REDUX token, username, userId upon login.\n* @memberof ReduxAction\n* @param {String} token: token of user account\n* @param {String} username: username\n* @param {String} userid: serial number of user\n*/\nexport const authSuccess = (token, username, userId) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\tusername: username,\n\t\tuserId: userId\n\t}\n}\n\n/** \n* Sends an action to alert an error.\n* @memberof ReduxAction\n* @param {Object} error: error\n*/\nexport const authFail = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\n/** \n* Called upon logout, removes everything in LOCALSTORAGE \n* @memberof ReduxAction\n*/\nexport const logout = () => {\n\tlocalStorage.clear();\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\n/** \n* Called during checking of authentication state, updates REDUX token, remove all USER attributes in LOCALSTORAGE\n* @memberof ReduxAction\n*/\nexport const notLoggedIn = () => {\n\tlocalStorage.removeItem('user');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\n/** \n* Called upon login, logins by checking with backend, updates USER attributes in LOCALSTORAGE, \n* and calls authSuccess or authFailed, depending on outcome.\n* @memberof ReduxAction\n* @param {String} username: username of user\n* @param {String} password: password of user\n*/\nexport const authLogin = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStart());\n\t\taxios.post(DATABASE_URL + 'api/authenticate/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.token;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst user = {\n\t\t\t\t'id': userId,\n\t\t\t\t'token': token,\n\t\t\t\t'username': username\n\t\t\t}\n\t\t\tlocalStorage.setItem('user', JSON.stringify(user));\n\t\t\tdispatch(authSuccess(token, username, userId));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\n/** \n* Signs up by sending POST req to backend, then calls authLogin.\n* @memberof ReduxAction\n* @param {String} username: username of user\n* @param {String} email: email of user\n* @param {String} password1: password1 of user\n* @param {String} password2: password2 of user\n*/\nexport const authSignup = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStart());\n\t\taxios.post(DATABASE_URL + 'rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tdispatch(authLogin(username, password1));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\n/** \n* Checks with LOCALSTORAGE (token) if user is logged in, and updates REDUX token accordingly.\n* @memberof ReduxAction\n*/\nexport const authCheckState = () => {\n\treturn dispatch => {\n\t\tconst user = JSON.parse(localStorage.getItem('user'));\n\t\tif (user === undefined || user === null) {\n\t\t\tdispatch(notLoggedIn());\n\t\t} else {\n\t\t\tconst token = user['token'];\n\t\t\tconst username = user['username'];\n\t\t\tdispatch(authSuccess(token, username));\n\t\t}\n\t}\t\n}\n\n\n// TRIP ----------------------------------------------------------------------\n\n/** \n* Stores trip variables into local storage, POSTS data if logined, and updates redux state for trip.\n* @memberof ReduxAction\n* @param {String} tripCountry: country of trip\n* @param {number} tripLat: lattitude of country of trip\n* @param {number} tripLng: longitude of country of trip\n* @param {String} startDate: start date of trip\n* @param {String} endDate: end date of trip\n*/\nexport const newTripData = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\tconst data = {\n\t\t\t\tdestination: tripCountry,\n\t\t\t\ttripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n\t\t\t\tstartDate: startDate,\n\t\t\t\tendDate: endDate\n\t\t\t}\n\taxios.post(DATABASE_URL + 'api/trips/', data, {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token},\n\t\t}).then(res => console.log(res));\n\n\tconst trip = {\n\t\t'country' : tripCountry,\n\t\t'lat' : tripLat,\n\t\t'lng' : tripLng,\n\t\t'startDate' : startDate,\n\t\t'endDate' : endDate,\n\t\t'activitiesAdded': [],\n\t\t'activitiesAddedIds': [],\n\t\t'itinerary' : [[]],\n\t}\n\tlocalStorage.setItem('trip', JSON.stringify(trip));\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttrip: trip\n\t}\n\n}\n\n/** \n* Calls authStart to change REDUX loading to true, then proceeds on to call newTripData.\n* @memberof ReduxAction\n* @param {String} tripCountry: country of trip\n* @param {number} tripLat: lattitude of country of trip\n* @param {number} tripLng: longitude of country of trip\n* @param {String} startDate: start date of trip\n* @param {String} endDate: end date of trip\n*/\nexport const newTrip = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\treturn dispatch => {\n\t\tdispatch(authStart());\n\t\tdispatch(newTripData(tripCountry, tripLat, tripLng, startDate, endDate));\n\t}\n}\n\n/**\n* Gets trip details from local storage, and update it to redux state.\n* @memberof ReduxAction\n*/\nexport const checkTrip = () => {\n\tif (localStorage.trip !== null && localStorage.trip !== undefined) {\n\t\treturn {\n\t\t\ttype: actionTypes.NEW_TRIP,\n\t\t\ttrip: JSON.parse(localStorage.trip)\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\ttype: actionTypes.AUTH_FAIL,\n\t\t\terror: \"No trip found\"\n\t\t}\n\t}\n}\n\n\n// MAP / ACTIVITIES --------------------------------------------------------------------------\n\n/**\n* Sends an action to reducer to update map information with new bounds of map\n* @memberof ReduxAction\n* @param {Object} bounds: new bounds of map\n*/\nexport const mapBoundsChange = (bounds) => {\n\treturn {\n\t\ttype: actionTypes.MAP_BOUNDS_CHANGED,\n\t\tbounds: bounds\n\t}\n}\n\n/**\n * Sends an action to reducer to change activities loading to true.\n * @memberof ReduxAction\n */\nexport const activitiesStart = () => {\n\treturn {\n\t\ttype: actionTypes.ACTIVITIES_START\n\t}\n}\n\n/**\n * Calls activitiesStart to change REDUX activities loading to true, then proceeds on to call activitiesLoadData\n * @memberof ReduxAction\n * @param {Object} data: contains parameters to call for Google API to load data\n */\nexport const activitiesLoad = (data) => {\n\treturn (dispatch) => {\n\t\tdispatch(activitiesStart());\n\t\tdispatch(activitiesLoadData(data));\n\t}\n}\n\n/**\n * Loads data to update activities shown in redux state according to data type entered, and update it to redux state.\n * @memberof ReduxAction\n * @param {Object} data: contains parameters to call for Google API to load data\n */\nexport const activitiesLoadData = (data) => {\n\treturn (dispatch) => {\n\t// * Change URL depending on dataType.\n\t\n\tvar url;\n\tif (data.dataType === \"TEXTSEARCH\") {\n\t\turl = \"http://trippyy-backend.herokuapp.com/api/TextSearch/\"\n\t} else if (data.dataType === \"NEXTKEYSEARCH\") {\n\t\turl = \"http://trippyy-backend.herokuapp.com/api/NextKeySearch/\"\n\t} else if (data.dataType === \"BOUNDEDTEXTSEARCH\") {\n\t\turl = \"http:/trippyy-backend.herokuapp.com/api/BoundedTextSearch/\"\n\n\t\t// If input type was to go to previous page, simply change activities shown\n\t\t// inside reducer.\n\t} else if (data.dataType === \"GOPREV\") {\n\t\tdispatch({\n\t\t\ttype: actionTypes.ACTIVITIES_LOAD,\n\t\t\tdataType: data.dataType,\n\t\t})\n\t\treturn;\n\t\t// If input type was to go to next page, simply change activities shown\n\t\t// inside reducer.\n\t} else if (data.dataType === \"GONEXT\") {\n\t\taxios.get(\"www.wikipedia.com\").then((res) => {console.log(\"e\")});\n\t\tdispatch({\n\t\t\ttype: actionTypes.ACTIVITIES_LOAD,\n\t\t\tdataType: data.dataType,\n\t\t})\n\t\treturn;\n\t}\n\t\n\taxios.post(url, data)\n          .then( (res) => {\n          \t// * Upon loading data, check if the activities ID are already added into trip, by comparing with local\n          \t// * if added already, add a {added: true} to the activity\n          \tres = (JSON.parse(res.data));\n          \tconsole.log(res);\n          \t// Check for next page token, if it exists, store it.\n          \tvar nextPageToken;\n          \tif (res[\"next_page_token\"]) {\n          \t\tnextPageToken = res[\"next_page_token\"];\n          \t} else {\n          \t\tnextPageToken = -1;\n          \t}\n\n          \t \n          \t// * Storing results, and checking if place is alr added\n          \t\n          \tvar results = res[\"results\"]\n          \tfor (var i = 0; i < results.length; i++) {\n          \t\tif (JSON.parse(localStorage.trip)[\"activitiesAddedIds\"].includes(results[i].id)) {\n          \t\t\tconst newPlace = updateObject(results[i], {added: true})\n          \t\t\tresults[i] = newPlace\n          \t\t}\n          \t}\n\n          \t\n          \t// * Dispatch results IF LOADING NEW PAGE DATA\n          \t\n            dispatch({\n            \ttype: actionTypes.ACTIVITIES_LOAD,\n            \tdataType: data.dataType,\n            \tactivitiesShown: results,\n            \tnextPageToken: nextPageToken,\n            })\n        }).catch( (error) => {\n            alert(error);\n            dispatch({\n            \ttype: actionTypes.ACTIVITIES_LOAD,\n            \tdataType: data.dataType,\n            \tactivitiesShown: [],\n            })\n        });\n\n    }\n}\n\n/**\n* Adds activity, update redux state to change status of activity to {added: true} \n* @memberof ReduxAction\n* @param {number} index: index of activity added.\n*/\nexport const activitiesAdd = (index) => {\n\treturn {\n\t\ttype: actionTypes.ACTIVITY_ADD,\n\t\tindex: index\n\t}\n}\n\nexport const activitiesSubtract = (index) => {\n\treturn {\n\t\ttype: actionTypes.ACTIVITY_SUBTRACT,\n\t\tindex: index\n\t}\n}\n\n \n// GET ITINERARY --------------------------------------------------------------------------\n\n/**\n * Sends an action to reducer to change itinerary loading to true, and update it to redux state.\n * @memberof ReduxAction\n */\nexport const itineraryLoadStart = () => {\n\treturn {\n\t\ttype: actionTypes.ITINERARY_START,\n\t}\n}\n\n/**\n * Calls itineraryLoadStart to change REDUX itinerary loading to true, then proceeds on to call itineraryLoadData.\n * @memberof ReduxAction\n * @param {Object} data: contains a list of activities selected to generate itinerary\n */\nexport const itineraryLoad = (data) => {\n\treturn (dispatch) => {\n\t\tdispatch(itineraryLoadStart());\n\t\tdispatch(itineraryLoadData(data));\n\t}\n}\n\n/**\n * Calls backend request to generate itinerary and update it to redux state.\n * @memberof ReduxAction\n * @param {Object} data: contains a list of activities selected to generate itinerary\n */\nexport const itineraryLoadData = (data) => {\n\treturn (dispatch) => {\n\t    axios.post(\"https:/trippyy-backend.herokuapp.com/api/algo/\", data).then( (res) => {\n\t        var iti = JSON.parse(res.data);\n\t        dispatch({\n\t\t\t\ttype: actionTypes.ITINERARY_LOAD,\n\t\t\t\titinerary: iti,\n\t\t\t\tgetItineraryLoading: false,\n\t\t\t});\n\t    });\n\t}\n}\n\n/**\n * Updates activities of itinerary, deletes the activity at fromIndex, and adds the activity\n * in the position of toIndex, and update it to redux state.\n * @memberof ReduxAction\n * @param {number} toIndex: index of intended new position of activity\n * @param {number} fromIndex: index of original position of activity\n */\nexport const itineraryUpdate = (toIndex, fromIndex) => {\n\treturn {\n\t\ttype: actionTypes.ITINERARY_UPDATE,\n\t\ttoIndex: toIndex,\n\t\tfromIndex: fromIndex,\n\t}\n}\n\n\n\n\n\n\n","export const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\nexport const NEW_TRIP = 'NEW_TRIP'\nexport const MAP_BOUNDS_CHANGED = 'MAP_BOUNDS_CHANGED'\nexport const ACTIVITIES_LOAD = 'ACTIVITIES_LOAD'\nexport const ACTIVITIES_START = 'ACTIVITIES_START'\nexport const ACTIVITY_ADD = 'ACTIVITY_ADD'\nexport const ACTIVITY_SUBTRACT = 'ACTIVITY_SUBTRACT';\nexport const ITINERARY_START = 'ITINERARY_START'\nexport const ITINERARY_LOAD = 'ITINERARY_LOAD'\nexport const ITINERARY_UPDATE = 'ITINERARY_UPDATE'","\n// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\nimport { Link } from 'react-router-dom';\nimport \"./CSS/navBar.css\";\n\n/**\n * Component, renders the Navigation Bar\n * Should be able to show whether a user is logged in from here.\n * @memberof Component\n * @param {ReduxState} user: Contains information about user if logged in. (e.g. token, username)\n */\nclass NavBar extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar fixed-top navbar-expand-lg\" id =\"nav1\">\n\t\t\t<Link to=\"/\" className=\"navbar-brand\" href=\"#\">trippyy</Link>\n\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t</button>\n\n\t\t\t<div className=\"collapse navbar-collapse col-11\" id=\"navbar-nav\" >\n\t\t\t<ul className=\"navbar-nav justify-content-center\">\n\n\t\t\t<li className=\"nav-item\">\n\t\t\t<Link to=\"/\" className =\"nav-link\"> Home </Link>\n\t\t\t</li>\n\n\t\t\t<li className=\"nav-item\">\n\t\t\t<Link to=\"/mytrips\" className =\"nav-link\"> My Trips<span className=\"sr-only\">(current)</span></Link>\n\t\t\t</li>\n\n\t\t\t{\n\t\t\t\tthis.props.isAuthenticated ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to= \"/\" className =\"nav-link\" onClick = {this.props.logout}>\n\t\t\t\tLogout\n\t\t\t\t</Link>\n\t\t\t\t</li>\n\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to=\"/mytrips\" className=\"nav-link\" id=\"accountLink\">Account: {this.props.user.username}</Link>\n\t\t\t\t</li>\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\n\t\t\t\t<React.Fragment>\n\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to={{\n\t\t\t\t\tpathname: \"/login\",\n\t\t\t\t\tstate: { from: this.props.from }\n\t\t\t\t}} className=\"nav-link\" id=\"loginLink\"> Login </Link>\n\t\t\t\t</li>\n\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to=\"/signup\" className=\"nav-link\" id=\"signupLink\"> Signup </Link>\n\t\t\t\t</li>\n\n\t\t\t\t</React.Fragment>\n\n\t\t\t}\n\t\t\t</ul>\n\t\t\t</div>\n\t\t\t</nav>);\n\n\t}\n\n}\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tisAuthenticated: state.user !== null,\n\t\tuser: state.user\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tlogout: () => dispatch(actions.logout())\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from 'react';\n\n\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nimport { DateRangePicker } from 'react-dates';\n\n/**\n * Component, renders calendar for entering dates of trip.\n * @memberof Component\n * @param {updateDates} Method: passed from parent to update date information.\n * @returns Rendered calendar to input dates easily\n */\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: null,\n      endDate: null,\n      focusedInput: null,\n    };\n  }\n\n  render() {\n    return (\n        <DateRangePicker\n          startDateId=\"startDate\"\n          endDateId=\"endDate\"\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n          onDatesChange={({ startDate, endDate }) => \n            { \n              this.setState({ startDate, endDate });\n              if (endDate !== null && startDate !== null) {\n                this.props.updateDates(startDate.format(\"YYYY-MM-DD\"), endDate.format(\"YYYY-MM-DD\"));\n              }\n            }\n          }\n          focusedInput={this.state.focusedInput}\n          onFocusChange={(focusedInput) => { this.setState({ focusedInput })}}\n        />\n    );\n  }\n}\n\nexport default Calendar;\n","import React, { Component } from 'react';\n\n\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\n/**\n * Component, renders input bar for entering destination city of trip.\n * @memberof Component\n * @param {updateCountry} Method: passed from parent to update country information.\n * @returns Rendered input bar with autocomplete functionality\n */\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '' };\n  }\n\n  /**\n  * Called upon any character input/delete.\n  * @param {String} address: Address inputted by user\n  */\n  handleChange = address => {\n    this.setState({ address });\n    this.props.updateCountry(address, null);\n  };\n\n  /**\n  * Called when user selects a City, updateCountry called upon selection.\n  * @param {updateCountry} Method: passed from parent to update country information.\n  * @param {String} address: Address inputted by user\n  */\n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n    .then(results => getLatLng(results[0]))\n    .then(latLng => this.props.updateCountry(address, latLng))\n    .catch(error => console.log(error));\n  };\n\n  searchOptions = {\n    types: ['(regions)']\n  }\n\n  render() {\n    return (\n      <PlacesAutocomplete\n      value={this.state.address}\n      onChange={this.handleChange}\n      onSelect={this.handleSelect}\n      searchOptions={this.searchOptions}\n      highlightFirstSuggestion={true}\n      >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n        <input\n        {...getInputProps({\n          placeholder: 'Search City',\n          className: 'location-search-input',\n        })}\n        />\n        <div className=\"autocomplete-dropdown-container\">\n        {loading}\n        {suggestions.map(suggestion => {\n          const className = suggestion.active\n          ? 'suggestion-item--active'\n          : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                  {...getSuggestionItemProps(suggestion, {\n                    className,\n                    style,\n                  })}\n                  >\n                  <span>{suggestion.description}</span>\n                  </div>\n                  );\n              })}\n        </div>\n        </div>\n        )}\n      </PlacesAutocomplete>\n      );\n  }\n}\n\nexport default Autocomplete","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"./inputForm.css\"\nimport Calendar from \"./Calendar\"\nimport { Spinner } from 'react-bootstrap';\nimport Autocomplete from './Autocomplete'\n\n/**\n * Component, renders input form for user to input City and dates of trip.\n * @memberof Component\n * @param {user} Redux-state: Contains information about user if logged in. (e.g. token, username)\n * @param {ReduxAction} newTrip: Updates redux state with new trip information.\n */\nclass InputForm extends Component {\n\n\tstate = {\n\t\tnewTripCreated: false,\n\t\tgoToShoppingPage: false,\n\t}\n\n\t/** \n\t* Called from component Calendar, in which upon input of dates, local state dates would be updated\n\t* @param {String} startDate: start date of trip.\n\t* @param {String} endDate: start date of trip.\n\t*/\n\tupdateDates = (startDate, endDate) => {\n\t\tthis.setState({startDate, endDate});\n\t}\n\n\t/** \n\t* Called from component Autocomplete, in which upon input of country, local state country would be updated\n\t* @param {String} countryName: name of country.\n\t* @param {Object} latLng: coordinates of country.\n\t*/\n\tupdateCountry = (countryName, latLng) => {\n\t\tthis.setState({countryName, latLng});\n\t}\n\n\t/** Called upon pressing the submit button, creates a new trip, \n\t* and checks for basic input validation before submitting, \n\t* and calling the redux-action (newTrip) to update redux-state with trip information.\n\t* @param {ReduxAction} newTrip: Updates redux state with new trip information.\n\t*/\n\tnewTrip = (event) => {\n\t\tif (this.state.startDate == null || this.state.endDate == null) {\n\t\t\talert(\"Please choose dates first!\");\n\t\t} else if (this.state.countryName == null || this.state.latLng == null) {\n\t\t\talert(\"Please select a country from the list!\");\n\t\t} else {\n\t\t\tevent.preventDefault();\n\t\t\tthis.props.newTrip(this.state.countryName, this.state.latLng[\"lat\"], this.state.latLng[\"lng\"], this.state.startDate, this.state.endDate);\n\t\t\tthis.setState({newTripCreated: true});\n\t\t}\n\t}\n\n\t//If new trip created is true, and loading is complete, then go to shopping page.\n\t// static getDerivedStateFromProps(nextProps, prevState){\n\t//   if (nextProps.loading===false && prevState.newTripCreated===true){\n\t//      return { goToShoppingPage: true };\n\t//   }\n\t//   else return null;\n\t// }\n\n\t//Happens upon receiving updated information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    \tif (this.props.loading===false && this.state.newTripCreated===true) {\n    \t\tthis.props.history.push(\"/shopping\");\n    \t}\n    }\n\n\trender() {\n\t\treturn (\n\t      <div className = \"container-fluid align-items-center inputForm\">\n\t      \t{\n\t    \t\t (this.props.isAuthenticated) ?\n\t    \t\t\t <h1>Hello, {this.props.user.username}!</h1> : (<h1>Hello stranger:)</h1>)\n\t    \t}\n\t          <div className = \"jumbotron\">\n\t              <form onSubmit = {this.newTrip}> \n\t                <div>\n\t                \t<h3> Enter Country: </h3>\n\t                \t<Autocomplete updateCountry={this.updateCountry} name = \"country\"/>\n\t                </div>\n\n\t                <div className =\"inputForm\">\n\t                \t<h3> Enter dates: </h3>\n\t                \t<Calendar updateDates={this.updateDates}/>\n\t                </div>\n\t                \n\t                <div className = \"inputForm\">\n\t                \t{ !this.props.loading ? \n\t                \t\t<button> Submit </button> \n\t                \t\t:\n\t\t\t\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t\t\t\t  <span className=\"sr-only\">Loading...</span>\n\t\t\t\t\t\t\t</Spinner>\n\n\t                \t}\n\t                </div>\n\t              </form>\n\n\t              \n\t          </div>\n\t      </div>);\n\n\t}\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.user !== null,\n        user: state.user,\n        loading: state.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        newTrip: (tripCountry, tripLat, tripLng, startDate, endDate) => dispatch(actions.newTrip(tripCountry, tripLat, tripLng, startDate, endDate)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\n","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from '../Components/navBar';\nimport InputForm from '../Components/StartComponents/InputForm'\nimport \"./CSS/global.css\"\n\n/** Container, renders sign up page.\n* @memberof Container\n* @param {Component} Navbar, renders navigation bar.\n* @param {Component} InputForm, renders input form to enter name of country\n* @param {ReduxAction} checkTrip, updates redux state of trip with local storage\n* @param {ReduxAction} authCheckState, updates redux state of user with local storage\n* @param {ReduxAction} newTrip, updates redux state of updated trip info\n*/\nclass StartPage extends Component {\n\n\tcomponentDidMount() {\n\t\t//Updates login status into redux.\n\t\tthis.props.onTryAutoSignup();\n\t\tthis.props.checkTrip();\n\t}\n\n\trender() {\n\t  return (\n\t    <div >\n\t    \t<NavBar from={this.props.location.pathname}/>\n\t    \t<InputForm history={this.props.history} />\n\t    \t\n\t    </div>\n\t  );\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckState()),\n\t\tcheckTrip: () => dispatch(actions.checkTrip())\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);\n","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport NavBar from '../Components/navBar';\nimport \"./CSS/global.css\"\nimport { Spinner } from 'react-bootstrap';\n\n/** Container, renders login page.\n* @memberof Container\n* @param {Component} Navbar, renders navigation bar.\n* @param {ReduxAction} checkTrip, updates redux state of trip with local storage\n* @param {ReduxAction} authCheckState, updates redux state of user with local storage\n* @param {ReduxAction} authLogin, updates redux state of user with logged in information.\n*/\nclass Login extends Component {\n\n    componentDidMount() {\n      //Updates login status into redux.\n      this.props.onTryAutoSignup();\n\n      //Checks if logged in, redirect to mainpage.\n      if (localStorage.user !== null && localStorage.user !== undefined) {\n        this.props.history.push('/');\n      }\n    }\n\n    //Happens upon receiving updated login information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //Checks where the page came from, if legit page, then redirect to where they came from.\n        if (this.props.isAuthenticated) {\n          if (this.props.location.state === undefined || this.props.location.state === null) {\n            this.props.history.push('/');\n          } else {\n            const from = this.props.location.state.from;\n            this.props.history.push(from);\n            this.setState({from: null});\n          }\n        }\n    }\n    /**\n    * Called upon submission of login form, then calls redux-action (authLogin) to login and update redux state.\n    * @param {Object} event: contains form information about username and password.\n    */\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAuth(event.target.username.value, event.target.password.value);\n      }\n\n    render() {\n        return (\n          <div className = \"container-fluid align-items-center\">\n              <NavBar from={this.props.location.pathname}/>\n              <div className = \"jumbotron startBox\">\n                <h1> Login</h1> \n                  <form onSubmit={this.handleSubmit}>\n                    <div className = \"element\">\n                      <input type = \"text\" name = \"username\" placeholder = \"Enter Username\" />\n                    </div>\n                    \n                    <div className = \"element\">\n                      <input type = \"password\" name = \"password\" placeholder = \"Enter Password\" />\n                    </div>\n                    {\n                      this.props.loading ? \n                        <Spinner animation=\"border\" role=\"status\" className = \"element\">\n                          <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                      :\n                        <button className = \"element\" type=\"submit\" value = \"Submit\"> Submit </button>\n                    }\n                  </form>\n              </div>\n          </div>);\n\n    }\n\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n      isAuthenticated: state.user !== null,\n      loading: state.loading,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoSignup: () => dispatch(actions.authCheckState()),\n        onAuth: (username, password) => dispatch(actions.authLogin(username, password)) \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport NavBar from '../Components/navBar';\nimport { Spinner } from 'react-bootstrap';\n\n/** Container, renders sign up page.\n* @memberof Container\n* @param {Component} Navbar, renders navigation bar.\n* @param {ReduxAction} checkTrip, updates redux state of trip with local storage\n* @param {ReduxAction} authCheckState, updates redux state of user with local storage\n* @param {ReduxAction} authSignup, updates redux state of new user sign up info.\n*/\nclass Signup extends Component {\n\n    componentDidMount() {\n      //Updates login status into redux.\n      this.props.onTryAutoSignup();\n\n      //If user is logged in, redirect to main page.\n      if (localStorage.user !== null && localStorage.user !== undefined) {\n        alert(\"Please logout to create a new account\");\n        this.props.history.push('/');\n      }\n    }\n\n    //Happens upon receiving updated login information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.isAuthenticated) {\n            this.props.history.push('/');\n        }\n    }\n\n    /**\n    * Called upon submission of signup form, then calls redux-action (authLogin) to signup and update redux state.\n    * @param {Object} event: contains form information about username, password and email\n    */\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAuth(event.target.username.value, event.target.email.value,\n          event.target.password1.value, event.target.password2.value);\n      }\n\n    render() {\n        return (\n          <div className = \"container-fluid align-items-center\">\n              <NavBar from={this.props.location.pathname}/>\n              \n              <div className = \"jumbotron startBox\">\n                <h1> SIGN UP</h1>\n                  <form onSubmit={this.handleSubmit}>\n                    <div className = \"element\">\n                      <input type = \"text\" name = \"username\" placeholder = \"Enter Username\" />\n                    </div>\n                    \n                    <div className = \"element\">\n                      <input type = \"text\" name = \"email\" placeholder = \"Enter Email\" />\n                    </div>\n\n                    <div className = \"element\">\n                      <input type = \"password\" name = \"password1\" placeholder = \"Enter Password\" />\n                    </div>\n\n                    <div className = \"element\">\n                      <input type = \"password\" name = \"password2\" placeholder = \"Enter Password again\" />\n                    </div>\n                    {\n                      this.props.loading ? \n                        <Spinner animation=\"border\" role=\"status\" className = \"element\">\n                          <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                      :\n                        <button className = \"element\" type=\"submit\" value = \"Submit\"> Submit </button>\n                    }\n                  </form>\n              </div>\n          </div>);\n\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      loading: state.loading,\n      isAuthenticated: state.user !== null\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2)),\n        onTryAutoSignup: () => dispatch(actions.authCheckState()),\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport axios from \"axios\";\nimport NavBar from '../Components/navBar';\nimport { Spinner } from 'react-bootstrap';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\";\n\n/** Container, renders my trips page.\n* @memberof Container\n* @param {Component} Navbar, renders navigation bar.\n* @param {ReduxAction} checkTrip, updates redux state of trip with local storage\n* @param {ReduxAction} authCheckState, updates redux state of user with local storage\n*/\nclass MyTrips extends Component {\n\tstate = {\n\t\ttripIDs: [],\n\t\ttrips: [],\n\t\tlocal_loading: null\n\t}\n\n\t/** \n\t* Called upon page load, loads trips from backend.\n\t*/\n\tloadTrips = () => {\n\t\ttry {\n\t\t\tconst user = JSON.parse(localStorage.user);\n\t\t\taxios.get(DATABASE_URL + \"api/users/\" + user['id'], {\n\t\t\t\theaders: {Authorization: \"Token \" + user['token']}\n\t\t\t}).then(res => {\n\t\t\t\tthis.setState({tripIDs: res.data.trips});\n\t\t\t}).then(res => {\n\t\t\t\t// If no trips, finish loading.\n\t\t\t\tif (this.state.tripIDs.length <= 0) {\n\t\t\t\t\tthis.setState({local_loading: false});\n\t\t\t\t}\n\n\t\t\t\t// If have trips, get trips.\n\t\t\t\tfor (let i = 0; i < this.state.tripIDs.length; i++) {\n\t\t\t\t\taxios.get(DATABASE_URL + \"api/trips/\" + this.state.tripIDs[i], \n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {Authorization: \"Token \" + user['token']}\n\t\t\t\t\t}).then( res => {\n\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t{trips: [...this.state.trips, res.data]}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t//If it is loaded last item, then change loading to false.\n\t\t\t\t\t\tif (i === this.state.tripIDs.length - 1) {\n\t\t\t\t\t\t\tthis.setState({local_loading: false});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\t\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (error) {\n\t\t\talert(error);\n\t\t\tthis.props.history.push(\"/\");\n\t\t}\n\t}\n\tcomponentDidMount() {\n\n\t\tthis.setState({local_loading: true});\n\n\t\t//Updates login status to redux.\n\t\tthis.props.onTryAutoSignup();\n\n\t\t//If user is not logged in, redirect to Login page\n\t\tif (localStorage.user === null || localStorage.user === undefined) {\n\t\t\tthis.props.history.push({\n\t\t\t\t\tpathname: \"/login\",\n\t\t\t\t\tstate: { from: this.props.location.pathname }\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.loadTrips()\n\t\t}\n\n\t\t// Loads trips from backend assuming logged in, catch doesnt handle!\n\t\t// Need to add checks \n\t\t\n\t}\n\nrender() {\n\treturn (\n\t\t<React.Fragment>\n\t\t<NavBar from={this.props.location.pathname}/>\n\t\t<div className = \"jumbotron startBox\">\n\t\t<h1> My Trips </h1>\n\n\t\t{ \n\t\t\tthis.state.local_loading ? \n\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t  <span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t:\n\t\t\t\t(this.state.trips.length > 0) ? \n\t\t\t\t\t<ul>\n\t\t\t\t\t{this.state.trips.map((value,index) => <li key={index}> {value.tripName} </li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t: \n\t\t\t\t\t<p> No trips available </p>\n\t\t\t\t\n\t\t}\n\t\t</div>\n\n\t\t</React.Fragment> \n\t\t);\n}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tisAuthenticated: state.user !== null,\n\t\tuser: state.user\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckState()),\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\nimport \"./CSS/Activity.css\";\n\n\n/**\n * Component, renders a single activity.\n * @memberof Component\n * @param {Object} value: details of the activity\n * @param {number} displayIndex: index to show in website\n * @param {number} index: index of activity\n */\nclass Activity extends Component{\n\trender() {\n\t\tvar activityClass;\n\t\tif (this.props.index < 10) {\n\t\t\tactivityClass = \"activityTop\"\n\t\t} else {\n\t\t\tactivityClass = \"activityBottom\"\n\t\t}\n\t\treturn (\n\t\t<div>\n\t\t\t{this.props.value.added === true ?\n\t\t\t\t\t<div id=\"added\" className={activityClass} onClick={() => this.props.activityClickHandlerToSubtract(this.props.index)}>\n\t\t\t\t\t\t{(this.props.displayIndex) + 1} : {this.props.value.name}\n\t\t\t\t\t</div>\n\t\t\t\t:\n\t\t\t\t\t<div id=\"notAdded\" className={activityClass} onClick={() => this.props.activityClickHandlerToAdd(this.props.index)}>\n\t\t\t\t\t\t{(this.props.displayIndex) + 1} : {this.props.value.name}\n\t\t\t\t\t</div>\n\t\t\t}\n\t\t</div>)\n\t}\n}\n\nexport default Activity;","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport { Spinner , Button} from 'react-bootstrap';\nimport \"./CSS/ActivityList.css\";\nimport Activity from './Activity'\n\nconst API_KEY = \"AIzaSyDyb0_iNF_gpoxydk5Vd8IpWj1Hy1Tp5Vc\"\n\n\n\n/**\n * Component, renders a list of activities.\n * @memberof Component\n * @param {Component} Activity\n * @param {ReduxAction} activitiesLoad: to load activities from Google API\n * @param {ReduxAction} activitiesAdd: to update redux state when adding an activity to the list of selected activities upon selection\n * @param {ReduxState} map: Redux object with map information (e.g. lng/lat of center, and bounds)\n * @param {ReduxAction} activitiesShown: Redux object with information about the list of activities currently rendered\n * @returns Rendered list of activities\n */\nclass ActivityList extends Component{\n    state = {\n        activities: [],\n        localLoading: false,\n        items: 20,\n        isScrolling: null,\n    }\n\n    convertSpaceToPlus(text) {\n        for (let i = 0; i < text.length; i++) {\n            text = text.replace(\" \", \"+\")  \n        }\n        return text\n    } \n\n    activityClickHandlerToAdd = (index) => {\n            this.props.activitiesAdd(index);\n    }\n\n    activityClickHandlerToSubtract = (index) => {\n            this.props.activitiesSubtract(index);\n    }\n\n    componentDidMount() {\n        // Data parameters as such: \n        // for api/TextSearch/ - key: API_KEY, query: text query\n        // for api/BoundedTextSearch/ - key: API_KEY, query: text query, lat: lat of center, lng: lng of center, radius: radius of map\n        // for api/NextKeySearch/ - key: API_KEY, next_page_token: next page token\n\n        if (localStorage.trip !== undefined) {\n            const data = {\n                dataType: \"TEXTSEARCH\",\n                key: API_KEY,\n                query: this.convertSpaceToPlus(JSON.parse(localStorage.trip)[\"country\"] + \" points of interest\")\n            }\n            \n            // Retrieves Singapore places of interest.\n            this.props.activitiesLoad(data);\n        }\n        \n\n\n        // Use this if were to implement infinite scrolling instead.\n        // var timeout = null;\n        // this.refs.myscroll.addEventListener(\"scroll\", () => {\n        //     // timeout = setTimeout( () => console.log(\"hey\"), 500);\n        //     const endHeight = this.refs.myscroll.scrollHeight - this.refs.myscroll.clientHeight\n            \n        //     if (this.refs.myscroll.scrollTop == 0) {\n        //         // this.loadPrev(); when the component mounts it will auto call previous :-()\n        //     } else if (this.refs.myscroll.scrollTop >= endHeight) {\n        //         this.loadNext();\n        //     }\n\n        // });\n    }\n\n    /**\n    * Called upon pressing the next page button.\n    * Function to load next page of activities. If next page was loaded before, call\n    * redux-action (activitiesLoad) with \"GONEXT\" parameter to retrieve next page, else\n    * call with \"NEXTKEYSEARCH\" to retrieve next page from calling Google API.\n    * @param {ReduxAction} activitiesLoad: to load activities from Google API\n    */\n    loadNext = () => {\n        this.refs.myscroll.scrollTop = 0;\n        if (!this.props.isLastPage) {\n            if (this.props.activitiesShown.hasNextPageLoaded) {\n                const data = {\n                    dataType: \"GONEXT\",\n                    pageNumber: this.props.activitiesShown.pageNumber\n                }\n                this.props.activitiesLoad(data);\n                return;\n            } else {\n                const data = {\n                    dataType: \"NEXTKEYSEARCH\",\n                    key: API_KEY,\n                    next_page_token: this.props.activitiesShown.nextPageToken,\n                }\n                this.props.activitiesLoad(data);\n                return;\n            }\n        } \n    }\n\n    /**\n    * Called upon pressing the previous page button.\n    * Function to load prev page of activities. Call redux-action (activitiesLoad) with\n    * \"GOPREV\" parameter to retrieve activities from prev page.\n    * @param {ReduxAction} activitiesLoad: to load activities from Google API\n    */\n    loadPrev = () => {\n        this.refs.myscroll.scrollTop = 0;\n        if (!this.props.isFirstPage) {\n            const data = {\n                dataType: \"GOPREV\",\n            }\n            this.props.activitiesLoad(data);\n        }\n\n    }\n\n    /**\n    * Called upon pressing any of the category buttons to change category.\n    * Function to load a new category of activities. Call redux-action (activitiesLoad) with\n    * \"TEXTSEARCH\" parameter to retrieve activities from Google API with new category.\n    * @param {ReduxAction} activitiesLoad: to load activities from Google API\n    */\n    changeCategory = (event) => {\n        if (event.target.value === \"general\") {\n            const data = {\n                dataType: \"TEXTSEARCH\",\n                key: API_KEY,\n                query: this.convertSpaceToPlus(JSON.parse(localStorage.trip)[\"country\"] + \" points of interest\")\n            }\n            // Retrieves Singapore places of interest.\n            this.props.activitiesLoad(data);\n        } else {\n            const data = {\n                dataType: \"TEXTSEARCH\",\n                key: API_KEY,\n                query: this.convertSpaceToPlus(JSON.parse(localStorage.trip)[\"country\"] + \" \" + event.target.value + \" attractions\")\n            }\n            console.log(data.query)\n            this.props.activitiesLoad(data);\n        }\n    }\n    render() {\n        return (\n            <div id=\"activityList\" ref = \"myscroll\">\n            { this.props.activitiesLoading ?\n\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner> \n\n                : \n                <Fragment>\n\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"general\">General</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Food\">Food</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Outdoor\">Outdoors</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Art & Culture\">Art & Culture</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Beaches\">Beaches</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Museums\">Museums</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Amusement park\">Amusement Parks</Button>\n                      <Button variant=\"info\" className=\"customButton\" onClick={this.changeCategory} value=\"Local Favorite\">Local Favorites</Button>\n                    {\n                        (!this.props.isFirstPage) &&\n                            <Button id=\"prevPageButton\" variant=\"primary\" className=\"customButton\" onClick ={this.loadPrev}> Scroll to Prev Page </Button>\n                    }\n\n                    {this.props.activitiesShown.currentList.map((value,index) => \n                        <Activity \n                        key={index} \n                        value={value} \n                        displayIndex={index + this.props.activitiesShown.firstActivityCounter} \n                        activityClickHandlerToAdd={this.activityClickHandlerToAdd}\n                        activityClickHandlerToSubtract={this.activityClickHandlerToSubtract}\n                        index={index}\n                        />)\n                    }\n\n                    {\n                        this.props.isLastPage ?\n                            <div> No more! Try changing category or moving the map </div>\n                        :\n                            <Button variant=\"primary\" className=\"customButton\" id=\"nextPageButton\" onClick ={this.loadNext}> Scroll to Next Page </Button>\n                    }\n                </Fragment>\n            }\n            </div>\n            );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        map: state.map,\n        activitiesShown: state.activitiesShown,\n        activitiesLoading: state.activitiesLoading,\n        isLastPage: (!state.activitiesShown.hasNextPageLoaded) && (state.activitiesShown.nextPageToken === -1),\n        isFirstPage: state.activitiesShown.pageNumber === 0,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        activitiesLoad: (data) => dispatch(actions.activitiesLoad(data)),\n        activitiesAdd: (index) => dispatch(actions.activitiesAdd(index)),\n        activitiesSubtract: (index) => dispatch(actions.activitiesSubtract(index))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityList);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"./CSS/SelectedActivityList.css\";\nimport { Link } from 'react-router-dom';\n\n/**\n * Component, renders activities currently added into the trip.\n * @memberof Component\n * @param {ReduxState} trip: Contains information about current trip (e.g. trip name/date, and list of current activities added)\n * @param {ReduxAction} itineraryLoad: Updates redux state to generate itinerary.\n */\nclass SelectedActivityList extends Component{\n    componentDidMount() {\n    }\n\n    state = {\n    }\n\n    /**\n    * Called upon clicking button to generate itinerary. Calls Redux-action (itineraryLoad) to generate.\n    * @param {ReduxAction} itineraryLoad: Updates redux state to generate itinerary.\n    */\n    getItinerary = () => {\n        const data = {\n            lengthOfTrip: 5,\n            activitiesAdded: this.props.trip.activitiesAdded\n        }\n        this.props.itineraryLoad(data);\n    }\n\n    closeModal = () => {\n        this.setState({open: false})\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Link to=\"/results\" className=\"itiButton\" onClick={this.getItinerary} value=\"general\">Get Itinerary</Link>\n            \t<div id=\"selectedActivityList\">\n            \t\t{\n            \t\t\tthis.props.trip[\"activitiesAdded\"].map( (value, index) => <p key={index}>{value.name}</p>)\n            \t\t}\n            \t</div>\n            </Fragment>)\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        trip: state.trip,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        itineraryLoad: (data) => dispatch(actions.itineraryLoad(data)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedActivityList);","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport NavBar from '../Components/navBar';\nimport Map from '../Components/Map'\nimport ActivityList from '../Components/ActivityList'\nimport SelectedActivityList from '../Components/SelectedActivityList'\nimport \"./CSS/global.css\"\n\n/** Container, renders shopping page\n* @memberof Container\n* @param {Component} Navbar, renders navigation bar.\n* @param {Component} Map, renders map.\n* @param {Component} ActivityList, renders activity list.\n* @param {Component} SelectedActivityList, renders selected activities list.\n* @param {ReduxAction} checkTrip, updates redux state of trip with local storage\n* @param {ReduxAction} authCheckState, updates redux state of user with local storage\n*/\nclass Shopping extends Component {\n\n    componentDidMount() {\n      if (localStorage.getItem('trip') === null || localStorage.getItem('trip') === undefined) {\n        this.props.history.push('/');\n        return;\n      } \n      //Updates login status and trip status into redux.\n      this.props.onTryAutoSignup();\n      this.props.checkTrip();\n      \n\n    }\n\n    //Happens upon receiving updated login information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    render() {\n\n        return (\n          <div className = \"container-fluid align-items-center\">\n              <NavBar from={this.props.location.pathname}/>\n              <div className = \"startBox\">\n                <div className = \"row\">\n                  <div className = \"col-3\" id=\"selectedActivitiesBox\">\n                    <h2> Welcome to {this.props.trip[\"country\"]} </h2>\n                    <SelectedActivityList/>\n                  </div>\n                  <div className = \"col-3\" id=\"activitiesBox\">\n                    <h2> Activities: </h2>\n                    <ActivityList/>\n                  </div>\n\n                  <div className =\"col-6\">\n                    <Map/>\n                  </div>\n                </div>\n              </div>\n          </div>\n        );\n\n    }\n\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n      isAuthenticated: state.user !== null,\n      trip: state.trip,\n      loading: state.loading,\n      error: state.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoSignup: () => dispatch(actions.authCheckState()),\n        checkTrip: () => dispatch(actions.checkTrip()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shopping);","// Basic Imports\nimport React, { Component } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"./CSS/Timetable.css\"\n\n/**\n * Component, renders activities currently added into the trip in a timetable manner,\n * enabling it to be customizable by dragging the blocks around.\n * @memberof Component\n * @param {ReduxState} trip: Contains information about current trip (e.g. trip name/date, and list of current activities added)\n * @param {ReduxAction} itineraryUpdate: Updates redux state to update itinerary.\n */\nclass Timetable extends Component {\n\n\tstate = {\n\t\tfromIndex: -1,\n\t\tfromDayIndex: -1,\n\t}\n\n\t/**\n\t* Called upon selection of activity block.\n\t* @param {event} Contains information about mouse location etc.\n\t*/\n\tonDragStart = (event) => {\n    \tthis.setState({fromIndex: event.target.dataset.index})\n    \tthis.setState({fromDayIndex: event.target.dataset.dayindex})\n\t}\n\n\t/**\n\t* Called everytime the mouse moves when dragging.\n\t* @param {event} Contains information about mouse location etc.\n\t*/\n\tonDragOver = (event) => {\n\t\tevent.preventDefault()\n\t\t//Defining the positions of the block\n\t\tconst toIndex = event.target.dataset.index;\n\t\tconst toDayIndex = event.target.dataset.dayindex;\n\t\tconst fromIndex = this.state.fromIndex;\n\t\tconst fromDayIndex = this.state.fromDayIndex;\n\n\t\t// If it is at the same position, do not run.\n\t\tif (toIndex === fromIndex && toDayIndex === fromDayIndex) {\n\t\t\treturn;\n\n\t\t// Update the itinerary in redux.\n\t\t} else if (toIndex !== undefined && toDayIndex !== undefined) {\n\t\t\tthis.props.itineraryUpdate([toDayIndex, toIndex], [fromDayIndex, fromIndex]);\n\t\t\tthis.setState({fromIndex: toIndex});\n\t\t\tthis.setState({fromDayIndex: toDayIndex});\n\t\t}\n\t}\n\n\n\t/**\n\t* Called when activity is dropped.\n\t* @param {event} Contains information about mouse location etc.\n\t*/\n\tonDrop = (event) => {\n\t\tevent.preventDefault();\n\t}\n\n\trender() {\n\t\tif (!this.props.trip[\"itinerary\"]) {\n\t\t\treturn <h1> loading </h1>\n\t\t}\n\t    return (\n\t\t    <div id=\"timetable\"\n\t\t    \t\tonDragOver={(event)=>this.onDragOver(event)}\n\t      \t\t\tonDrop={this.onDrop}>\n\t          {this.props.trip[\"itinerary\"].map( (value, dayindex) => (\n\t          \t<div className=\"day\">\n\t          \t\t{\n\t          \t\t\tvalue.map((value, index) => {\n\t          \t\t\t\tif (index !== 0) {\n\t\t\t\t          \treturn <div\n\t\t\t\t          \t\tkey={index}\n\t\t\t\t          \t\tdata-index={index}\n\t\t\t\t          \t\tdata-dayindex={dayindex}\n\t\t\t\t          \t\tdraggable\n\t\t\t\t          \t\tclassName=\"timetableActivity\"\n\t\t\t\t\t\t\t\tonDragStart = {this.onDragStart}\n\t\t\t\t\t\t\t    style ={{backgroundColor: value.bgcolor}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t    <p> {JSON.parse(value)[\"name\"]} </p>\n\t\t\t\t\t    \t</div>\n\t\t\t\t\t    \t}\n\t\t\t\t\t    \treturn null;\n\t\t\t\t\t    })\n\t\t\t\t    \t\n\t\t\t    \t}\n\t          \t</div>)\n\t          )}\n\t        </div>\n\t    );\n  \t}\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        trip: state.trip,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    \titineraryUpdate: (toIndex, fromIndex) => dispatch(actions.itineraryUpdate(toIndex, fromIndex))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Timetable);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"./CSS/Results.css\"\nimport Timetable from '../Components/Timetable'\nimport NavBar from '../Components/navBar'\n\n/** Container, renders results page\n* @memberof Container\n* @param {Component} Navbar, renders navigation bar.\n* @param {Component} Timetable, renders timetable to display activities.\n* @param {ReduxAction} checkTrip, updates redux state of trip with local storage\n* @param {ReduxAction} authCheckState, updates redux state of user with local storage\n*/\nclass Results extends Component {\n    componentDidMount() {\n        this.props.checkTrip();\n        this.props.onTryAutoSignup();\n    }\n\n\trender() {\n\t\treturn (\n            <Fragment>\n                <NavBar from={this.props.location.pathname}/>\n                <div>\n                    <Timetable/>\n                </div>\n            </Fragment>);\n\t} \n\t        \n  \t\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        trip: state.trip,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoSignup: () => dispatch(actions.authCheckState()),\n        checkTrip: () => dispatch(actions.checkTrip()),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport StartPage from './Containers/StartPage';\nimport Login from './Containers/Login';\nimport Signup from './Containers/Signup';\nimport MyTrips from './Containers/MyTrips';\nimport Shopping from './Containers/Shopping';\nimport Results from './Containers/Results';\n\nconst BaseRoute = () => (\n\t<Switch> \n\t\t<Route exact path='/' component = {StartPage} />\n\t\t<Route exact path ='/login/' component = {Login} />\n\t\t<Route exact path ='/signup/' component = {Signup} />\n\t\t<Route exact path ='/mytrips' component = {MyTrips} />\n\t\t<Route exact path ='/shopping' component = {Shopping} />\n\t\t<Route exact path ='/results' component = {Results} />\n\n\t</Switch> );\n\nexport default BaseRoute;\n\t\t\n","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {\n\terror: null,\n\tloading: false,\n\tactivitiesLoading: false,\n\tgetItineraryLoading: false,\n\n\tuser: null,\n\n\ttrip: {\n\t\t'country' : -1,\n\t\t'lat' : -1,\n\t\t'lng' : -1,\n\t\t'startDate': -1,\n\t\t'endDate' : -1,\n\t\t'activitiesAdded' : [],\n\t\t'activitiesAddedIds' : [],\n\t\t'itinerary' : [[]],\n\t},\n\n\tmap: {\n\t\t'bounds': {\n\t\t\t\"upper\": {\n\t\t\t\t\"lat\": -1,\n\t\t\t\t\"lng\": -1,\n\n\t\t\t}, \n\n\t\t\t\"lower\": {\n\t\t\t\t\"lat\": -1,\n\t\t\t\t\"lng\": -1,\n\t\t\t},\n\n            \"center\": -1,\n\n            \"radius\": -1,\n\t\t}\n\t},\n\n\tactivitiesShown: {\n\t\t\"currentList\": [],\n\t\t\"fullList\": [], \n\t\t\"firstActivityCounter\": -1, \n\t\t\"pageNumber\": -1,\n\t\t\n\t\t\"nextPageToken\": -1,\n\n\t\t\"hasNextPageLoaded\": false,\n\t\t\"pageLoadedUpTo\": -1,\n\t}\n}\n\nconst authStart = (state, action) => {\n\treturn updateObject(state, {\n\t\terror: null,\n\t\tloading: true\n\t});\n}\n\nconst authSuccess = (state, action) => {\n\tconst user = {\n\t\t'id': action.userId,\n\t\t'token': action.token,\n\t\t'username': action.username\n\t}\n\t\n\treturn updateObject(state, {\n\t\tuser: user,\n\t\terror: null,\n\t\tloading: false,\n\t});\n}\n\nconst authFail = (state, action) => {\n\treturn updateObject(state, {\n\t\terror: action.error,\n\t\tloading: false\n\t});\n}\n\nconst authLogout = (state, action) => {\n\treturn updateObject(state, {\n\t\tuser: null,\n\t});\n}\n\nconst newTrip = (state, action) => {\n\treturn updateObject(state, {\n\t\ttrip: action.trip,\n\t\tloading: false\n\t})\n}\n\nconst updateBounds = (state, action) => {\n\tconst newMap = updateObject(state.map, {\n\t\tbounds: action.bounds\n\t})\n\n\treturn updateObject(state, {\n\t\tmap: newMap\n\t})\n}\n\nconst activitiesLoad = (state, action) => {\n\t// If load next page, get and display next page data, and add onto fullActivitiesShown list\n\tif (action.dataType === \"NEXTKEYSEARCH\") {\n\t\tconst newFullList = [...state.activitiesShown.fullList, action.activitiesShown ];\n\t\tconst activitiesShown = {\n\t\t\tcurrentList: action.activitiesShown,\n\t\t\tfullList: newFullList,\n\t\t\tpageLoadedUpTo: state.activitiesShown.pageNumber + 1,\n\t\t\tpageNumber: state.activitiesShown.pageNumber + 1,\n\t\t\tfirstActivityCounter: state.activitiesShown.firstActivityCounter + 20,\n\t\t\tnextPageToken: action.nextPageToken,\n\t\t}\n\t\treturn updateObject(state, {\n\t\t\tactivitiesShown: activitiesShown,\n\t\t\tactivitiesLoading: false,\n\t\t})\n\n\n\t// If the request was to go to a prev page, \n\t// ASSERT that fullList at this point would have activities added already.\n\t} else if (action.dataType === \"GOPREV\") {\n\t\tconst newCurrentList = [...state.activitiesShown.fullList[state.activitiesShown.pageNumber - 1]]\n\t\tconst activitiesShown = updateObject(state.activitiesShown, {\n\t\t\tcurrentList: newCurrentList,\n\t\t\tpageNumber: state.activitiesShown.pageNumber - 1,\n\t\t\tfirstActivityCounter: state.activitiesShown.firstActivityCounter - 20,\n\t\t\thasNextPageLoaded: true,\n\t\t})\n\t\treturn updateObject(state, {\n\t\t\tactivitiesShown: activitiesShown,\n\t\t\tactivitiesLoading: false,\n\t\t})\n\n\n\t// If has next page loaded, pressing next page will call to this instead,\n\t// just reassign the activities shown and hasNextPageLoaded.\n\t} else if (action.dataType === \"GONEXT\") {\n\t\tconst newCurrentList = [...state.activitiesShown.fullList[state.activitiesShown.pageNumber + 1]]\n\t\tvar hasNextPageLoaded;\n\t\tif (state.activitiesShown.pageNumber + 1 >= state.activitiesShown.pageLoadedUpTo) {\n\t\t\thasNextPageLoaded = false\n\t\t} else {\n\t\t\thasNextPageLoaded = true\n\t\t}\n\t\tconst activitiesShown = updateObject(state.activitiesShown, {\n\t\t\tcurrentList: newCurrentList,\n\t\t\tpageNumber: state.activitiesShown.pageNumber + 1,\n\t\t\tfirstActivityCounter: state.activitiesShown.firstActivityCounter + 20,\n\t\t\thasNextPageLoaded: hasNextPageLoaded,\n\t\t})\n\t\treturn updateObject(state, {\n\t\t\tactivitiesShown: activitiesShown,\n\t\t\tactivitiesLoading: false,\n\t\t})\n\t}\n\n\n\t// If data type = bounded search or text search (meaning it is first load)\n\telse {\n\t\tconst activitiesShown = {\n\t\t\tcurrentList: action.activitiesShown,\n\t\t\tfullList: [action.activitiesShown],\n\n\t\t\tpageNumber: 0,\n\t\t\tfirstActivityCounter: 0,\n\t\t\tnextPageToken: action.nextPageToken,\n\t\t}\n\t\treturn updateObject(state, {\n\t\t\tactivitiesShown: activitiesShown,\n\t\t\tactivitiesLoading: false,\n\t\t})\n\t}\n}\n\nconst activitiesStart = (state, action) => {\n\treturn updateObject(state, {\n\t\tactivitiesLoading: true\n\t})\n}\n\nconst activitiesAdd = (state, action) => {\n\t// Retrieve trip for cache, can be done using state too, but both works.\n\tvar currentTrip = JSON.parse(localStorage.trip);\n\n\t// Retrieve activity that was added by referencing the index (id) \n\t// Update the activity such that {added: true}\n\tvar activityAdded = state.activitiesShown.currentList[action.index];\n\tactivityAdded = updateObject(activityAdded, {added: true});\n\n\t// Replace the activity in ActivitiesShown with a new one that says added:true\n\tvar activitiesShownCurrentList = [...state.activitiesShown.currentList];\n\tactivitiesShownCurrentList[action.index] = activityAdded;\n\n\tvar activitiesShownFullList = [...state.activitiesShown.fullList];\n\tactivitiesShownFullList[state.activitiesShown.pageNumber][action.index] = activityAdded;\n\n\tvar activitiesShown = updateObject(state.activitiesShown, {\n\t\tcurrentList: activitiesShownCurrentList,\n\t\tfullList: activitiesShownFullList,\n\t})\n\n\n\t// Merge all changes into currentTrip\n\tcurrentTrip['activitiesAdded'].push(activityAdded);\n\tcurrentTrip['activitiesAddedIds'].push(activityAdded.id)\n\n\t// Update currentTrip\n\tlocalStorage.setItem('trip', JSON.stringify(currentTrip));\n\n\treturn updateObject(state, {\n\t\ttrip: currentTrip,\n\t\tactivitiesShown: activitiesShown,\n\t})\n}\n\nconst activitiesSubtract = (state, action) => {\n\t// Retrieve trip for cache, can be done using state too, but both works.\n\tvar currentTrip = JSON.parse(localStorage.trip);\n\n\t// Retrieve activity that was selected/clicked on by referencing the index (id) \n\t// Update the activity such that {added: false}\n\tvar activitySelected = state.activitiesShown.currentList[action.index];\n\tactivitySelected = updateObject(activitySelected, {added: false});\n\n\t// Replace the activity in ActivitiesShown with a new one that says added: false\n\tvar activitiesShownCurrentList = [...state.activitiesShown.currentList];\n\tactivitiesShownCurrentList[action.index] = activitySelected;\n\n\tvar activitiesShownFullList = [...state.activitiesShown.fullList];\n\tactivitiesShownFullList[state.activitiesShown.pageNumber][action.index] = activitySelected;\n\n\tvar activitiesShown = updateObject(state.activitiesShown, {\n\t\tcurrentList: activitiesShownCurrentList,\n\t\tfullList: activitiesShownFullList,\n\t})\n\n\t// Merge all changes into currentTrip\n\tcurrentTrip['activitiesAdded'].pop(activitySelected);\n\tcurrentTrip['activitiesAddedIds'].pop(activitySelected.id)\n\n\t// Update currentTrip\n\tlocalStorage.setItem('trip', JSON.stringify(currentTrip));\n\n\treturn updateObject(state, {\n\t\ttrip: currentTrip,\n\t\tactivitiesShown: activitiesShown,\n\t})\n}\n\nconst itineraryLoad = (state, action) => {\n\tconst trip = updateObject(state.trip, {\n\t\titinerary: action.itinerary\n\t})\n\n\treturn updateObject(state, {\n\t\ttrip: trip,\n\t\tgetItineraryLoading: false,\n\n\t})\n\n}\n\nconst itineraryStart = (state, action) => {\n\treturn updateObject(state, {\n\t\tgetItineraryLoading: true,\n\t})\n}\n\nconst itineraryUpdate = (state, action) => {\n\tvar currentIti = [...state.trip.itinerary];\n\tvar fromDay = currentIti[action.fromIndex[0]];\n\tvar toDay = currentIti[action.toIndex[0]];\n\tvar fromActivity = fromDay[action.fromIndex[1]]\n\n\t// Delete FROM activity\n\tfromDay.splice(action.fromIndex[1], 1);\n\n\t// Add TO activity\n\ttoDay.splice(action.toIndex[1], 0, fromActivity);\n\n\t// Update currentIti\n\tcurrentIti[action.fromIndex[0]] = fromDay;\n\tcurrentIti[action.toIndex[0]] = toDay;\n\n\tconst trip = updateObject(state.trip, {\n\t\titinerary: currentIti,\n\t})\n\treturn updateObject(state, {\n\t\ttrip: trip,\n\t})\n\n}\n\nconst reducer = (state=initialState, action) => {\n\tswitch(action.type) {\n\n\t\tcase actionTypes.ACTIVITY_SUBTRACT: return activitiesSubtract(state, action);\n\t\tcase actionTypes.ACTIVITY_ADD: return activitiesAdd(state, action);\n\t\tcase actionTypes.ACTIVITIES_START: return activitiesStart(state, action);\n\t\tcase actionTypes.ACTIVITIES_LOAD: return activitiesLoad(state, action);\n\t\tcase actionTypes.MAP_BOUNDS_CHANGED: return updateBounds(state, action);\n\t\tcase actionTypes.NEW_TRIP: return newTrip(state, action);\n\t\tcase actionTypes.AUTH_START: return authStart(state, action);\n\t\tcase actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n\t\tcase actionTypes.AUTH_FAIL: return authFail(state, action);\n\t\tcase actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n\t\t\n\t\tcase actionTypes.ITINERARY_LOAD: return itineraryLoad(state, action);\n\t\tcase actionTypes.ITINERARY_START: return itineraryStart(state, action);\n\t\tcase actionTypes.ITINERARY_UPDATE: return itineraryUpdate(state, action);\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BaseRouter from './routes';\nimport { BrowserRouter as Router} from 'react-router-dom';\n// import * as serviceWorker from './serviceWorker';\n\nimport reducer from './store/reducers/reducer';\nimport { createStore , compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk' \n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducer, composeEnhances(\n\t\tapplyMiddleware(thunk)\n\t));\n\n\n/**\n * ReduxAction\n * @module ReduxAction\n */\n\n /**\n * Components\n * @module Component\n */\n\n /**\n * Containers\n * @module Container\n */\n \nconst app = (\n\t<Provider store={store}>\n\t\t<Router>\n\t  \t\t<BaseRouter />\n\t  \t</Router>\n\t</Provider>);\n\nReactDOM.render(\n  app, document.getElementById('root')\n);"],"sourceRoot":""}