{"version":3,"sources":["store/actions/actions.js","store/actions/actionTypes.js","Components/navBar.jsx","Components/StartComponents/Calendar.jsx","Components/StartComponents/Autocomplete.jsx","Components/StartComponents/InputForm.jsx","Containers/StartPage.jsx","Containers/Login.jsx","Containers/Signup.jsx","Containers/MyTrips.jsx","Components/Map.jsx","Containers/Shopping.jsx","routes.js","store/utility.js","store/reducers/reducer.js","index.js"],"names":["DATABASE_URL","authSuccessed","token","username","userId","type","authFailed","error","logouted","localStorage","clear","checkAuthTimeouted","expirationTime","dispatch","setTimeout","authLogined","password","axios","post","then","res","data","id","expirationDate","Date","getTime","setItem","catch","err","authCheckedState","getItem","undefined","removeItem","newTrip","tripCountry","tripLat","tripLng","startDate","endDate","destination","tripName","headers","Authorization","console","log","trip","JSON","stringify","newTripData","checkedTrip","parse","NavBar","className","to","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","this","props","isAuthenticated","Fragment","onClick","logout","pathname","state","from","Component","connect","onTryAutoSignup","actions","Calendar","focusedInput","startDateId","endDateId","onDatesChange","setState","updateDates","format","onFocusChange","Autocomplete","handleChange","address","handleSelect","geocodeByAddress","results","getLatLng","latLng","updateCountry","searchOptions","types","value","onChange","onSelect","highlightFirstSuggestion","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","InputForm","newTripCreated","goToShoppingPage","countryName","event","alert","preventDefault","prevProps","prevState","snapshot","history","push","onSubmit","name","Spinner","animation","role","nextProps","StartPage","location","Login","handleSubmit","onAuth","target","Signup","email","password1","password2","MyTrips","tripIDs","trips","local_loading","get","i","length","index","key","Map","startLat","startLng","WrappedMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","children","googleMapURL","loadingElement","height","containerElement","mapElement","center","position","defaultProps","Shopping","BaseRoute","exact","path","component","updateObject","oldObject","updatedProperties","initialState","authStart","action","authSuccess","authFail","authLogout","reducer","composeEnhances","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8567a053.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"\n\n// Sends an action to reducer to change loading to true.\nexport const authStarted = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\n// Sends an action to reducer to update REDUX token, username, userId upon login.\nexport const authSuccessed = (token, username, userId) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\tusername: username,\n\t\tuserId: userId\n\t}\n}\n\n// Sends an action to alert an error.\nexport const authFailed = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\n// Called upon logout, removes everything in LOCALSTORAGE \nexport const logouted = () => {\n\tlocalStorage.clear();\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\n// Called during checking of authentication state, updates REDUX token, remove all USER attributes in LOCALSTORAGE\nexport const notLoggedIn = () => {\n\tlocalStorage.removeItem('username');\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('userId');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const checkAuthTimeouted = expirationTime => {\n\treturn dispatch => {\n\t\tsetTimeout( () => {\n\t\t\tdispatch(logouted());\n\t\t}, expirationTime * 1000)\n\t}\n}\n\n// Called upon login, logins by checking with backend, updates USER attributes in LOCALSTORAGE, \n// and calls authSuccessed or authFailed, depending on outcome.\nexport const authLogined = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'api/authenticate/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.token;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t\tlocalStorage.setItem('userId', userId);\n\t\t\tdispatch(authSuccessed(token, username, userId));\n\t\t\tdispatch(checkAuthTimeouted(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\n// Signs up by sending POST req to backend, then calls authLogined.\nexport const authSignuped = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tdispatch(authLogined(username, password1));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\n// Checks with LOCALSTORAGE (token) if user is logged in, and updates REDUX token accordingly.\nexport const authCheckedState = () => {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst username = localStorage.getItem('username');\n\t\tif (token === undefined || token === null) {\n\t\t\tdispatch(notLoggedIn());\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\tif (expirationDate <= new Date() ) {\n\t\t\t\tdispatch(logouted());\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccessed(token, username));\n\t\t\t\tdispatch(checkAuthTimeouted( (expirationDate.getTime() - new Date().getTime()) / 1000 ));\n\t\t\t}\n\n\t\t}\n\t}\t\n}\n\n// ---------------------------------------------------------------------------------\n\n// Stores trip variables into local storage, POSTS data if logined, and updates redux state for trip.\nexport const newTripData = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\tconst data = {\n\t\t\t\tdestination: tripCountry,\n\t\t\t\ttripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n\t\t\t\tstartDate: startDate,\n\t\t\t\tendDate: endDate\n\t\t\t}\n\taxios.post(DATABASE_URL + 'api/trips/', data, {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token},\n\t\t}).then(res => console.log(res));\n\n\tconst trip = {\n\t\t'country' : tripCountry,\n\t\t'lat' : tripLat,\n\t\t'lng' : tripLng,\n\t\t'startDate' : startDate,\n\t\t'endDate' : endDate,\n\t}\n\tlocalStorage.setItem('trip', JSON.stringify(trip));\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttrip: trip\n\t}\n\n}\n\n// Calls authStarted to change REDUX loading to true, then proceeds on to call newTripData.\nexport const newTrip = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\tdispatch(newTripData(tripCountry, tripLat, tripLng, startDate, endDate));\n\t}\n}\n\n//Gets trip details from local storage\nexport const checkedTrip = () => {\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttrip: JSON.parse(localStorage.trip)\n\t}\n}\n\n\n","export const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\nexport const NEW_TRIP = 'NEW_TRIP'","\n// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\nimport { Link } from 'react-router-dom';\nimport \"./CSS/navBar.css\";\n\n\nclass NavBar extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar fixed-top navbar-expand-lg\" id =\"nav1\">\n\t\t\t<Link to=\"/\" className=\"navbar-brand\" href=\"#\">trippyy</Link>\n\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t</button>\n\n\t\t\t<div className=\"collapse navbar-collapse col-11\" id=\"navbar-nav\" >\n\t\t\t<ul className=\"navbar-nav justify-content-center\">\n\n\t\t\t<li className=\"nav-item\">\n\t\t\t<Link to=\"/\" className =\"nav-link\"> Home </Link>\n\t\t\t</li>\n\n\t\t\t<li className=\"nav-item\">\n\t\t\t<Link to=\"/mytrips\" className =\"nav-link\"> My Trips<span className=\"sr-only\">(current)</span></Link>\n\t\t\t</li>\n\n\t\t\t{\n\t\t\t\tthis.props.isAuthenticated ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to= \"/\" className =\"nav-link\" onClick = {this.props.logout}>\n\t\t\t\tLogout\n\t\t\t\t</Link>\n\t\t\t\t</li>\n\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to=\"/mytrips\" className=\"nav-link\"> Account: {this.props.username} </Link>\n\t\t\t\t</li>\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\n\t\t\t\t<React.Fragment>\n\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to={{\n\t\t\t\t\tpathname: \"/login\",\n\t\t\t\t\tstate: { from: this.props.from }\n\t\t\t\t}} className=\"nav-link\"> Login </Link>\n\t\t\t\t</li>\n\n\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t<Link to=\"/signup\" className=\"nav-link\"> Signup </Link>\n\t\t\t\t</li>\n\n\t\t\t\t</React.Fragment>\n\n\t\t\t}\n\t\t\t</ul>\n\t\t\t</div>\n\t\t\t</nav>);\n\n\t}\n\n}\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tisAuthenticated: state.token !== null,\n\t\tusername: state.username\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckedState()),\n\t\tlogout: () => dispatch(actions.logouted())\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from 'react';\n\n\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nimport { DateRangePicker } from 'react-dates';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: null,\n      endDate: null,\n      focusedInput: null,\n    };\n  }\n\n  render() {\n    return (\n        <DateRangePicker\n          startDateId=\"startDate\"\n          endDateId=\"endDate\"\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n          onDatesChange={({ startDate, endDate }) => \n            { \n              this.setState({ startDate, endDate });\n              if (endDate !== null && startDate !== null) {\n                this.props.updateDates(startDate.format(\"YYYY-MM-DD\"), endDate.format(\"YYYY-MM-DD\"));\n              }\n            }\n          }\n          focusedInput={this.state.focusedInput}\n          onFocusChange={(focusedInput) => { this.setState({ focusedInput })}}\n        />\n    );\n  }\n}\n\nexport default Calendar;","import React, { Component } from 'react';\n/* global google */\n\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '' };\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n  };\n\n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n    .then(results => getLatLng(results[0]))\n    .then(latLng => this.props.updateCountry(address, latLng))\n    .catch(error => console.log(error));\n  };\n\n  searchOptions = {\n    types: ['(regions)']\n  }\n\n  render() {\n    return (\n      <PlacesAutocomplete\n      value={this.state.address}\n      onChange={this.handleChange}\n      onSelect={this.handleSelect}\n      searchOptions={this.searchOptions}\n      highlightFirstSuggestion={true}\n      >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n        <input\n        {...getInputProps({\n          placeholder: 'Search City',\n          className: 'location-search-input',\n        })}\n        />\n        <div className=\"autocomplete-dropdown-container\">\n        {loading}\n        {suggestions.map(suggestion => {\n          const className = suggestion.active\n          ? 'suggestion-item--active'\n          : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                  {...getSuggestionItemProps(suggestion, {\n                    className,\n                    style,\n                  })}\n                  >\n                  <span>{suggestion.description}</span>\n                  </div>\n                  );\n              })}\n        </div>\n        </div>\n        )}\n      </PlacesAutocomplete>\n      );\n  }\n}\n\nexport default Autocomplete","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"./inputForm.css\"\nimport axios from \"axios\";\nimport Calendar from \"./Calendar\"\nimport { Link } from 'react-router-dom';\nimport { Spinner } from 'react-bootstrap';\nimport Autocomplete from './Autocomplete'\n\nclass InputForm extends Component {\n\n\tstate = {\n\t\tnewTripCreated: false,\n\t\tgoToShoppingPage: false,\n\t}\n\n\t//Called from component Calendar, in which upon input of dates, local state would be updated\n\tupdateDates = (startDate, endDate) => {\n\t\tthis.setState({startDate, endDate});\n\t}\n\n\t//Called from component Autocomplete, in which upon selection of country,\n\t//Current state would get updated.\n\tupdateCountry = (countryName, latLng) => {\n\t\tthis.setState({countryName, latLng});\n\t}\n\n\t// Upon pressing the submit button, creates a new trip, and checks for \n\t// basic input validation before submitting.\n\tnewTrip = (event) => {\n\t\tif (this.state.startDate == null || this.state.endDate == null) {\n\t\t\talert(\"Please choose dates first!\");\n\t\t} else if (this.state.countryName == null || this.state.latLng == null) {\n\t\t\talert(\"Please select a country from the list!\");\n\t\t} else {\n\t\t\tevent.preventDefault();\n\t\t\tthis.props.newTrip(this.state.countryName, this.state.latLng[\"lat\"], this.state.latLng[\"lng\"], this.state.startDate, this.state.endDate);\n\t\t\tthis.setState({newTripCreated: true});\n\t\t}\n\t}\n\n\t//If new trip created is true, and loading is complete, then go to shopping page.\n\tstatic getDerivedStateFromProps(nextProps, prevState){\n\t  if (nextProps.loading===false && prevState.newTripCreated===true){\n\t     return { goToShoppingPage: true };\n\t  }\n\t  else return null;\n\t}\n\n\t//Happens upon receiving updated information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n    \tif (this.state.goToShoppingPage === true) {\n    \t\tthis.props.history.push(\"/shopping\");\n    \t}\n    }\n\n\trender() {\n\t\treturn (\n\t      <div className = \"container-fluid align-items-center inputForm\">\n\t      \t{\n\t    \t\t (this.props.isAuthenticated) ?\n\t    \t\t\t <h1>Hello, {this.props.username}!</h1> : (<h1>Hello stranger:)</h1>)\n\t    \t}\n\t          <div className = \"jumbotron\">\n\t              <form onSubmit = {this.newTrip}> \n\t                <div>\n\t                \t<h3> Enter Country: </h3>\n\t                \t<Autocomplete updateCountry={this.updateCountry} name = \"country\"/>\n\t                </div>\n\n\t                <div className =\"inputForm\">\n\t                \t<h3> Enter dates: </h3>\n\t                \t<Calendar updateDates={this.updateDates}/>\n\t                </div>\n\t                \n\t                <div className = \"inputForm\">\n\t                \t{ !this.props.loading ? \n\t                \t\t<button> Submit </button> \n\t                \t\t:\n\t\t\t\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t\t\t\t  <span className=\"sr-only\">Loading...</span>\n\t\t\t\t\t\t\t</Spinner>\n\n\t                \t}\n\t                </div>\n\t              </form>\n\n\t              \n\t          </div>\n\t      </div>);\n\n\t}\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.token !== null,\n        username: state.username,\n        loading: state.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        newTrip: (tripCountry, tripLat, tripLng, startDate, endDate) => dispatch(actions.newTrip(tripCountry, tripLat, tripLng, startDate, endDate)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from '../Components/navBar';\nimport InputForm from '../Components/StartComponents/InputForm'\nimport Calendar from '../Components/StartComponents/Calendar'\nimport \"./CSS/global.css\"\nimport axios from \"axios\";\n\n\nclass StartPage extends Component {\n\n\tcomponentDidMount() {\n\t\t//Updates login status into redux.\n\t\tthis.props.onTryAutoSignup();\n\t}\n\n\trender() {\n\t  return (\n\t    <div >\n\t    \t<NavBar from={this.props.location.pathname}/>\n\t    \t<InputForm history={this.props.history} />\n\t    \t\n\t    </div>\n\t  );\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tisAuthenticated: state.token !== null,\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckedState()),\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);\n","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport axios from \"axios\";\nimport NavBar from '../Components/navBar';\nimport \"./CSS/global.css\"\nimport { Spinner } from 'react-bootstrap';\n\nclass Login extends Component {\n\n    componentDidMount() {\n      //Updates login status into redux.\n      this.props.onTryAutoSignup();\n\n      //Checks if logged in, redirect to mainpage.\n      if (localStorage.token !== null && localStorage.token !== undefined) {\n        this.props.history.push('/');\n      }\n    }\n\n    //Happens upon receiving updated login information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //Checks where the page came from, if legit page, then redirect to where they came from.\n        if (this.props.isAuthenticated) {\n          if (this.props.location.state === undefined || this.props.location.state === null) {\n            this.props.history.push('/');\n          } else {\n            const from = this.props.location.state.from;\n            this.props.history.push(from);\n            this.setState({from: null});\n          }\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAuth(event.target.username.value, event.target.password.value);\n      }\n\n    render() {\n        return (\n          <div className = \"container-fluid align-items-center\">\n              <NavBar from={this.props.location.pathname}/>\n              <div className = \"jumbotron startBox\">\n                <h1> Login</h1> \n                  <form onSubmit={this.handleSubmit}>\n                    <div className = \"element\">\n                      <input type = \"text\" name = \"username\" placeholder = \"Enter Username\" />\n                    </div>\n                    \n                    <div className = \"element\">\n                      <input type = \"text\" name = \"password\" placeholder = \"Enter Password\" />\n                    </div>\n                    {\n                      this.props.loading ? \n                        <Spinner animation=\"border\" role=\"status\" className = \"element\">\n                          <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                      :\n                        <button className = \"element\" type=\"submit\" value = \"Submit\"> Submit </button>\n                    }\n                  </form>\n              </div>\n          </div>);\n\n    }\n\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n      isAuthenticated: state.token !== null,\n\n      loading: state.loading,\n      error: state.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoSignup: () => dispatch(actions.authCheckedState()),\n        onAuth: (username, password) => dispatch(actions.authLogined(username, password)) \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport axios from \"axios\";\nimport NavBar from '../Components/navBar';\n\nclass Signup extends Component {\n\n    componentDidMount() {\n      //Updates login status into redux.\n      this.props.onTryAutoSignup();\n\n      //If user is logged in, redirect to main page.\n      if (localStorage.token !== null && localStorage.token !== undefined) {\n        alert(\"Please logout to create a new account\");\n        this.props.history.push('/');\n      }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onAuth(event.target.username.value, event.target.email.value,\n          event.target.password1.value, event.target.password2.value);\n        this.props.history.push('/');\n      }\n\n    render() {\n        return (\n          <div className = \"container-fluid align-items-center\">\n              <NavBar from={this.props.location.pathname}/>\n              \n              <div className = \"jumbotron startBox\">\n                <h1> SIGN UP</h1>\n                  <form onSubmit={this.handleSubmit}>\n                    <div className = \"element\">\n                      <input type = \"text\" name = \"username\" placeholder = \"Enter Username\" />\n                    </div>\n                    \n                    <div className = \"element\">\n                      <input type = \"text\" name = \"email\" placeholder = \"Enter Email\" />\n                    </div>\n\n                    <div className = \"element\">\n                      <input type = \"text\" name = \"password1\" placeholder = \"Enter Password\" />\n                    </div>\n\n                    <div className = \"element\">\n                      <input type = \"text\" name = \"password2\" placeholder = \"Enter Password again\" />\n                    </div>\n                    \n                    <button className =\"element\" type=\"submit\" value = \"Submit\"> Signup </button>\n                  </form>\n              </div>\n          </div>);\n\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (username, email, password1, password2) => dispatch(actions.authSignuped(username, email, password1, password2)),\n        onTryAutoSignup: () => dispatch(actions.authCheckedState()),\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport axios from \"axios\";\nimport NavBar from '../Components/navBar';\nimport { Spinner } from 'react-bootstrap';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\";\n\nclass MyTrips extends Component {\n\tstate = {\n\t\ttripIDs: [],\n\t\ttrips: [],\n\t\tlocal_loading: null\n\t}\n\tcomponentDidMount() {\n\n\t\tthis.setState({local_loading: true});\n\n\t\t//Updates login status to redux.\n\t\tthis.props.onTryAutoSignup();\n\n\t\t//If user is not logged in, redirect to Login page\n\t\tif (localStorage.getItem('token') == null || localStorage.getItem('token') == undefined) {\n\t\t\tthis.props.history.push({\n\t\t\t\t\tpathname: \"/login\",\n\t\t\t\t\tstate: { from: this.props.location.pathname }\n\t\t\t\t});\n\t\t}\n\n\t\t// Loads trips from backend assuming logged in, catch doesnt handle!\n\t\t// Need to add checks \n\t\ttry {\n\t\t\taxios.get(DATABASE_URL + \"api/users/\" + localStorage.userId, {\n\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t}).then(res => {\n\t\t\t\tthis.setState({tripIDs: res.data.trips});\n\t\t\t}).then(res => {\n\t\t\t\tfor (let i = 0; i < this.state.tripIDs.length; i++) {\n\t\t\t\t\taxios.get(DATABASE_URL + \"api/trips/\" + this.state.tripIDs[i], \n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t\t\t}).then( res => {\n\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t{trips: [...this.state.trips, res.data]}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t//If it is loaded last item, then change loading to false.\n\t\t\t\t\t\tif (i === this.state.tripIDs.length - 1) {\n\t\t\t\t\t\t\tthis.setState({local_loading: false});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\t\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (error) {\n\t\t\talert(error);\n\t\t\tthis.props.history.push(\"/\");\n\t\t}\n\t}\n\nrender() {\n\treturn (\n\t\t<React.Fragment>\n\t\t<NavBar from={this.props.location.pathname}/>\n\t\t<div className = \"jumbotron startBox\">\n\t\t<h1> My Trips </h1>\n\n\t\t{ \n\t\t\tthis.state.local_loading ? \n\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t  <span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t:\n\t\t\t\t(this.state.trips.length > 0) ? \n\t\t\t\t\t<ul>\n\t\t\t\t\t{this.state.trips.map((value,index) => <li key={index}> {value.tripName} </li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t: \n\t\t\t\t\t<p> No trips available </p>\n\t\t\t\t\n\t\t}\n\t\t</div>\n\n\t\t</React.Fragment> \n\t\t);\n}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tisAuthenticated: state.token !== null,\n\t\tusername: state.username\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckedState()),\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker\n} from \"react-google-maps\";\n\n\nclass Map extends Component{\n\n    state = {\n        trip: null,\n        startLat: null,\n        startLng: null\n    }\n    componentDidMount() {\n        this.props.checkedTrip();\n        this.setState({\n            startLng: JSON.parse(localStorage.trip)[\"lng\"],\n            startLat: JSON.parse(localStorage.trip)[\"lat\"],\n        })\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState){\n      if (nextProps.trip!==null){\n         return { trip: nextProps.trip };\n      }\n      else return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    static defaultProps = {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyB-tj53yeTQiKnUmi_Jr2a7caz5RJVY60Y&v=3.exp&libraries=geometry,drawing,places\",\n    }\n\n    WrappedMap = withScriptjs(withGoogleMap(props =>\n        <GoogleMap\n          defaultZoom={12}\n          defaultCenter={{ lat: this.state.startLat, lng: this.state.startLng }}\n        >\n            {props.children}\n        </GoogleMap>\n      ));\n\n\n\n    render() {\n        return (\n            <Fragment>\n                <this.WrappedMap\n                    googleMapURL={this.props.googleMapURL}\n                    loadingElement={<div style={{ height: `100%` }} />}\n                    containerElement={<div style={{ height: `600px` }} />}\n                    mapElement={<div style={{ height: `100%` }} />}\n                    center= {{ lat: 40.730610, lng:  -73.935242 }} \n                >\n                    <Marker\n                        position={{ lat: -34.397, lng: 150.644 }}\n                    />\n\n                </this.WrappedMap>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        trip: state.trip\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        checkedTrip: () => dispatch(actions.checkedTrip()),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);","// Basic Imports\nimport React, { Component, Fragment } from \"react\";\n// -------------------------------------------------------------------------\n\n//Imports needed for redux\nimport * as actions from '../store/actions/actions';\nimport { connect } from 'react-redux';\n// -------------------------------------------------------------------------\n\nimport axios from \"axios\";\nimport NavBar from '../Components/navBar';\nimport Map from '../Components/Map'\nimport \"./CSS/global.css\"\n\nclass Shopping extends Component {\n\n    componentDidMount() {\n      //Updates login status and trip status into redux.\n      this.props.onTryAutoSignup();\n      this.props.checkedTrip();\n\n      //Checks if logged in, redirect to mainpage.\n      if (localStorage.trip === null || localStorage.trip === undefined) {\n        this.props.history.push('/');\n      }\n    }\n\n    //Happens upon receiving updated login information.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    render() {\n        return (\n          <div className = \"container-fluid align-items-center\">\n              <NavBar from={this.props.location.pathname}/>\n              <div className = \"jumbotron startBox\">\n                <div className = \"row\">\n                  <div className = \"col-4\">\n                    <h1> Shopping! </h1>\n                    <p> Welcome to {this.props.trip[\"country\"]} </p>\n                  </div>\n\n                  <div className =\"col-8\">\n                    <Map/>\n                  </div>\n                </div>\n              </div>\n          </div>);\n\n    }\n\n}\n\n\n\nconst mapStateToProps = (state) => {\n    return {\n      isAuthenticated: state.token !== null,\n      trip: state.trip,\n      loading: state.loading,\n      error: state.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoSignup: () => dispatch(actions.authCheckedState()),\n        onAuth: (username, password) => dispatch(actions.authLogined(username, password)),\n        checkedTrip: () => dispatch(actions.checkedTrip()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shopping);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport StartPage from './Containers/StartPage';\nimport Login from './Containers/Login';\nimport Signup from './Containers/Signup';\nimport MyTrips from './Containers/MyTrips';\nimport Shopping from './Containers/Shopping';\n\nconst BaseRoute = () => (\n\t<Switch> \n\t\t<Route exact path='/' component = {StartPage} />\n\t\t<Route exact path ='/login/' component = {Login} />\n\t\t<Route exact path ='/signup/' component = {Signup} />\n\t\t<Route exact path ='/mytrips' component = {MyTrips} />\n\t\t<Route exact path ='/shopping' component = {Shopping} />\n\t</Switch> );\n\nexport default BaseRoute;\n\t\t\n","export const updateObject = (oldObject, updatedProperties) => {\n\treturn {\n\t\t...oldObject,\n\t\t...updatedProperties\n\t}\n}\n\n//Takes in oldObject, replaces the properties","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {\n\ttoken: null,\n\terror: null,\n\tloading: false,\n\tusername: null,\n\tuserId: null,\n\n\ttrip: {\n\t\t'country' : null,\n\t\t'lat' : null,\n\t\t'lng' : null,\n\t\t'startDate': null,\n\t\t'endDate' : null,\n\t}\n}\n\nconst authStart = (state, action) => {\n\treturn updateObject(state, {\n\t\terror: null,\n\t\tloading: true\n\t});\n}\n\nconst authSuccess = (state, action) => {\n\treturn updateObject(state, {\n\t\ttoken: action.token,\n\t\terror: null,\n\t\tloading: false,\n\t\tusername: action.username,\n\t\tuserId: action.userId,\n\t});\n}\n\nconst authFail = (state, action) => {\n\treturn updateObject(state, {\n\t\terror: action.error,\n\t\tloading: false\n\t});\n}\n\nconst authLogout = (state, action) => {\n\treturn updateObject(state, {\n\t\ttoken: null,\n\t});\n}\n\nconst newTrip = (state, action) => {\n\treturn updateObject(state, {\n\t\ttrip: action.trip,\n\t\tloading: false\n\t})\n}\n\nconst reducer = (state=initialState, action) => {\n\tswitch(action.type) {\n\n\t\tcase actionTypes.NEW_TRIP: return newTrip(state, action);\n\t\tcase actionTypes.AUTH_START: return authStart(state, action);\n\t\tcase actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n\t\tcase actionTypes.AUTH_FAIL: return authFail(state, action);\n\t\tcase actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BaseRouter from './routes';\nimport { BrowserRouter as Router} from 'react-router-dom';\n// import * as serviceWorker from './serviceWorker';\n\nimport reducer from './store/reducers/reducer';\nimport { createStore , compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk' \n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducer, composeEnhances(\n\t\tapplyMiddleware(thunk)\n\t));\n\nconst app = (\n\t<Provider store={store}>\n\t\t<Router>\n\t  \t\t<BaseRouter />\n\t  \t</Router>\n\t</Provider>);\n\nReactDOM.render(\n  app, document.getElementById('root')\n);"],"sourceRoot":""}