{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"; // Sends an action to reducer to change loading to true.\n\nexport const authStarted = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n}; // Sends an action to reducer to update REDUX token, username, userId upon login.\n\nexport const authSuccessed = (token, username, userId) => {\n  return {\n    token: token,\n    type: actionTypes.AUTH_SUCCESS,\n    username: username,\n    userId: userId\n  };\n}; // Sends an action to alert an error.\n\nexport const authFailed = error => {\n  return {\n    error: error,\n    type: actionTypes.AUTH_FAIL\n  };\n}; // Called upon logout, removes everything in LOCALSTORAGE \n\nexport const logouted = () => {\n  localStorage.clear();\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n}; // Called during checking of authentication state, updates REDUX token, remove all USER attributes in LOCALSTORAGE\n\nexport const notLoggedIn = () => {\n  localStorage.removeItem('username');\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeouted = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logouted());\n    }, expirationTime * 1000);\n  };\n}; // Called upon login, logins by checking with backend, updates USER attributes in LOCALSTORAGE, \n// and calls authSuccessed or authFailed, depending on outcome.\n\nexport const authLogined = (username, password) => {\n  return dispatch => {\n    dispatch(authStarted());\n    axios.post(DATABASE_URL + 'api/authenticate/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.token;\n      const userId = res.data.id;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('username', username);\n      localStorage.setItem('userId', userId);\n      dispatch(authSuccessed(token, username, userId));\n      dispatch(checkAuthTimeouted(3600));\n    }).catch(err => {\n      dispatch(authFailed(err));\n    });\n  };\n}; // Signs up by sending POST req to backend, then calls authLogined.\n\nexport const authSignuped = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStarted());\n    axios.post(DATABASE_URL + 'rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      dispatch(authLogined(username, password1));\n    }).catch(err => {\n      dispatch(authFailed(err));\n    });\n  };\n}; // Checks with LOCALSTORAGE (token) if user is logged in, and updates REDUX token accordingly.\n\nexport const authCheckedState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n\n    if (token === undefined || token === null) {\n      dispatch(notLoggedIn());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logouted());\n      } else {\n        dispatch(authSuccessed(token, username));\n        dispatch(checkAuthTimeouted((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}; // ---------------------------------------------------------------------------------\n\nexport const newTripData = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n  const data = {\n    destination: tripCountry,\n    tripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n    startDate: startDate,\n    endDate: endDate\n  };\n  axios.post(DATABASE_URL + 'api/trips/', data, {\n    headers: {\n      Authorization: \"Token \" + localStorage.token\n    }\n  }).then(res => console.log(res));\n  localStorage.setItem('tripCountry', tripCountry);\n  localStorage.setItem('tripLat', tripLat);\n  localStorage.setItem('tripLng', tripLng);\n  localStorage.setItem('startDate', startDate);\n  localStorage.setItem('endDate', endDate);\n  return {\n    type: actionTypes.NEW_TRIP,\n    tripCountry: tripCountry,\n    startDate: startDate,\n    endDate: endDate\n  };\n}; // Calls authStarted to change REDUX loading to true, then proceeds on to call newTripData.\n\nexport const newTrip = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n  return dispatch => {\n    dispatch(authStarted());\n    dispatch(newTripData(tripCountry, tripLat, tripLng, startDate, endDate));\n  };\n};","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/store/actions/actions.js"],"names":["actionTypes","axios","DATABASE_URL","authStarted","type","AUTH_START","authSuccessed","token","username","userId","AUTH_SUCCESS","authFailed","error","AUTH_FAIL","logouted","localStorage","clear","AUTH_LOGOUT","notLoggedIn","removeItem","checkAuthTimeouted","expirationTime","dispatch","setTimeout","authLogined","password","post","then","res","data","id","expirationDate","Date","getTime","setItem","catch","err","authSignuped","email","password1","password2","authCheckedState","getItem","undefined","newTripData","tripCountry","tripLat","tripLng","startDate","endDate","destination","tripName","headers","Authorization","console","log","NEW_TRIP","newTrip"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"\n\n// Sends an action to reducer to change loading to true.\nexport const authStarted = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\n// Sends an action to reducer to update REDUX token, username, userId upon login.\nexport const authSuccessed = (token, username, userId) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\tusername: username,\n\t\tuserId: userId\n\t}\n}\n\n// Sends an action to alert an error.\nexport const authFailed = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\n// Called upon logout, removes everything in LOCALSTORAGE \nexport const logouted = () => {\n\tlocalStorage.clear();\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\n// Called during checking of authentication state, updates REDUX token, remove all USER attributes in LOCALSTORAGE\nexport const notLoggedIn = () => {\n\tlocalStorage.removeItem('username');\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('userId');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const checkAuthTimeouted = expirationTime => {\n\treturn dispatch => {\n\t\tsetTimeout( () => {\n\t\t\tdispatch(logouted());\n\t\t}, expirationTime * 1000)\n\t}\n}\n\n// Called upon login, logins by checking with backend, updates USER attributes in LOCALSTORAGE, \n// and calls authSuccessed or authFailed, depending on outcome.\nexport const authLogined = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'api/authenticate/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.token;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t\tlocalStorage.setItem('userId', userId);\n\t\t\tdispatch(authSuccessed(token, username, userId));\n\t\t\tdispatch(checkAuthTimeouted(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\n// Signs up by sending POST req to backend, then calls authLogined.\nexport const authSignuped = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tdispatch(authLogined(username, password1));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\n// Checks with LOCALSTORAGE (token) if user is logged in, and updates REDUX token accordingly.\nexport const authCheckedState = () => {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst username = localStorage.getItem('username');\n\t\tif (token === undefined || token === null) {\n\t\t\tdispatch(notLoggedIn());\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\tif (expirationDate <= new Date() ) {\n\t\t\t\tdispatch(logouted());\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccessed(token, username));\n\t\t\t\tdispatch(checkAuthTimeouted( (expirationDate.getTime() - new Date().getTime()) / 1000 ));\n\t\t\t}\n\n\t\t}\n\t}\t\n}\n\n// ---------------------------------------------------------------------------------\n\nexport const newTripData = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\tconst data = {\n\t\t\t\tdestination: tripCountry,\n\t\t\t\ttripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n\t\t\t\tstartDate: startDate,\n\t\t\t\tendDate: endDate\n\t\t\t}\n\taxios.post(DATABASE_URL + 'api/trips/', data, {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token},\n\t\t}).then(res => console.log(res));\n\tlocalStorage.setItem('tripCountry', tripCountry);\n\tlocalStorage.setItem('tripLat', tripLat);\n\tlocalStorage.setItem('tripLng', tripLng);\n\tlocalStorage.setItem('startDate', startDate);\n\tlocalStorage.setItem('endDate', endDate);\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttripCountry: tripCountry,\n\t\tstartDate: startDate,\n\t\tendDate: endDate,\n\t}\n\n}\n\n// Calls authStarted to change REDUX loading to true, then proceeds on to call newTripData.\nexport const newTrip = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\tdispatch(newTripData(tripCountry, tripLat, tripLng, startDate, endDate));\n\t}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}