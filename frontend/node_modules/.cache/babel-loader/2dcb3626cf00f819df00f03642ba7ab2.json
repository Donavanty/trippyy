{"ast":null,"code":"var _jsxFileName = \"/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/Components/StartComponents/Autocomplete.jsx\";\nimport React, { Component } from 'react';\n/* global google */\n\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current, {\n      \"types\": [\"geocode\"]\n    });\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n  }\n\n  handlePlaceChanged() {\n    const place = this.autocomplete.getPlace();\n    this.props.onPlaceLoaded(place);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      ref: this.autocompleteInput,\n      id: \"autocomplete\",\n      placeholder: \"Enter your address\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    });\n  } // constructor(props) {\n  //   super(props);\n  //   this.state = { address: '' };\n  // }\n  // handleChange = address => {\n  //   this.setState({ address });\n  // };\n  // handleSelect = address => {\n  //   geocodeByAddress(address)\n  //   .then(results => getLatLng(results[0]))\n  //   .then(latLng => console.log('Success', latLng))\n  //   .catch(error => console.error('Error', error));\n  // };\n  // searchOptions = {\n  //   types: ['(regions)']\n  // }\n  // render() {\n  //   return (\n  //     <PlacesAutocomplete\n  //     value={this.state.address}\n  //     onChange={this.handleChange}\n  //     onSelect={this.handleSelect}\n  //     searchOptions={this.searchOptions}\n  //     >\n  //     {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n  //       <div>\n  //       <input\n  //       {...getInputProps({\n  //         placeholder: 'Search City',\n  //         className: 'location-search-input',\n  //       })}\n  //       />\n  //       <div className=\"autocomplete-dropdown-container\">\n  //       {loading && <div>Loading...</div>}\n  //       {suggestions.map(suggestion => {\n  //         const className = suggestion.active\n  //         ? 'suggestion-item--active'\n  //         : 'suggestion-item';\n  //               // inline style for demonstration purpose\n  //               const style = suggestion.active\n  //               ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n  //               : { backgroundColor: '#ffffff', cursor: 'pointer' };\n  //               return (\n  //                 <div\n  //                 {...getSuggestionItemProps(suggestion, {\n  //                   className,\n  //                   style,\n  //                 })}\n  //                 >\n  //                 <span>{suggestion.description}, {suggestion.types}</span>\n  //                 </div>\n  //                 );\n  //             })}\n  //       </div>\n  //       </div>\n  //       )}\n  //     </PlacesAutocomplete>\n  //     );\n  // }\n\n\n}\n\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/Components/StartComponents/Autocomplete.jsx"],"names":["React","Component","PlacesAutocomplete","geocodeByAddress","getLatLng","Autocomplete","constructor","props","autocompleteInput","createRef","autocomplete","handlePlaceChanged","bind","componentDidMount","google","maps","places","current","addListener","place","getPlace","onPlaceLoaded","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA;;AAEA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;;AAMA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AACjCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACnB,UAAMA,KAAN;AACA,SAAKC,iBAAL,GAAyBR,KAAK,CAACS,SAAN,EAAzB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,YAAL,GAAoB,IAAII,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBX,YAAvB,CAAoC,KAAKG,iBAAL,CAAuBS,OAA3D,EAChB;AAAC,eAAS,CAAC,SAAD;AAAV,KADgB,CAApB;AAGA,SAAKP,YAAL,CAAkBQ,WAAlB,CAA8B,eAA9B,EAA+C,KAAKP,kBAApD;AACD;;AAEDA,EAAAA,kBAAkB,GAAE;AAClB,UAAMQ,KAAK,GAAG,KAAKT,YAAL,CAAkBU,QAAlB,EAAd;AACA,SAAKb,KAAL,CAAWc,aAAX,CAAyBF,KAAzB;AACD;;AAIDG,EAAAA,MAAM,GAAG;AACP,wBACI;AAAO,MAAA,GAAG,EAAE,KAAKd,iBAAjB;AAAqC,MAAA,EAAE,EAAC,cAAxC;AAAuD,MAAA,WAAW,EAAC,oBAAnE;AACC,MAAA,IAAI,EAAC,MADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAID,GA3BkC,CA4BnC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA1FmC;;AA6FrC,eAAeH,YAAf","sourcesContent":["import React, { Component } from 'react';\n/* global google */\n\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\n\nclass Autocomplete extends Component {\n    constructor(props) {\n    super(props);\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current,\n        {\"types\": [\"geocode\"]});\n\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n  }\n\n  handlePlaceChanged(){\n    const place = this.autocomplete.getPlace();\n    this.props.onPlaceLoaded(place);\n  }\n\n\n\n  render() {\n    return (\n        <input ref={this.autocompleteInput}  id=\"autocomplete\" placeholder=\"Enter your address\"\n         type=\"text\"></input>\n    );\n  }\n  // constructor(props) {\n  //   super(props);\n  //   this.state = { address: '' };\n  // }\n\n  // handleChange = address => {\n  //   this.setState({ address });\n  // };\n\n  // handleSelect = address => {\n  //   geocodeByAddress(address)\n  //   .then(results => getLatLng(results[0]))\n  //   .then(latLng => console.log('Success', latLng))\n  //   .catch(error => console.error('Error', error));\n  // };\n\n  // searchOptions = {\n  //   types: ['(regions)']\n  // }\n\n  // render() {\n  //   return (\n  //     <PlacesAutocomplete\n  //     value={this.state.address}\n  //     onChange={this.handleChange}\n  //     onSelect={this.handleSelect}\n  //     searchOptions={this.searchOptions}\n  //     >\n  //     {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n  //       <div>\n  //       <input\n  //       {...getInputProps({\n  //         placeholder: 'Search City',\n  //         className: 'location-search-input',\n  //       })}\n  //       />\n  //       <div className=\"autocomplete-dropdown-container\">\n  //       {loading && <div>Loading...</div>}\n  //       {suggestions.map(suggestion => {\n  //         const className = suggestion.active\n  //         ? 'suggestion-item--active'\n  //         : 'suggestion-item';\n  //               // inline style for demonstration purpose\n  //               const style = suggestion.active\n  //               ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n  //               : { backgroundColor: '#ffffff', cursor: 'pointer' };\n  //               return (\n  //                 <div\n  //                 {...getSuggestionItemProps(suggestion, {\n  //                   className,\n  //                   style,\n  //                 })}\n  //                 >\n  //                 <span>{suggestion.description}, {suggestion.types}</span>\n  //                 </div>\n  //                 );\n  //             })}\n  //       </div>\n  //       </div>\n  //       )}\n  //     </PlacesAutocomplete>\n  //     );\n  // }\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}