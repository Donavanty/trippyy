{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    token: token,\n    type: actionTypes.AUTH_SUCCESS\n  };\n};\nexport const authFail = error => {\n  return {\n    error: error,\n    type: actionTypes.AUTH_FAIL\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\ncheckAuthTimeout = expirationDate => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess(token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout(expirationDate.getTime() - new Date().getTime()) / 1000);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationDate","dispatch","setTimeout","expirationTime","authLogin","username","password","post","then","res","data","key","Date","getTime","setItem","catch","err","authSignup","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStart = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\nexport const authSuccess = (token) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS\n\t}\n}\n\nexport const authFail = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\nexport const logout = () => {\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\ncheckAuthTimeout = expirationDate => {\n\treturn dispatch => {\n\t\tsetTimeout( () => {\n\t\t\tdispatch(logout());\n\t\t}, expirationTime * 1000)\n\t}\n}\nexport const authLogin = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStart());\n\t\taxios.post('http://127.0.0.1:8000/rest-auth/login/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.key;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tdispatch(authSuccess(token));\n\t\t\tdispatch(checkAuthTimeout(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\nexport const authSignup = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStart());\n\t\taxios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tconst token = res.data.key;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tdispatch(authSuccess(token));\n\t\t\tdispatch(checkAuthTimeout(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\nexport const authCheckState = () => {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token');\n\t\tif (token === undefined) {\n\t\t\tdispatch(logout())\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\tif (expirationDate <= new Date() ) {\n\t\t\t\tdispatch(logout());\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccess(token));\n\t\t\t\tdispatch((checkAuthTimeout(expirationDate.getTime() - new Date().getTime()) / 1000 ));\n\t\t\t}\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}