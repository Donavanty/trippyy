{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  token: null,\n  error: null,\n  loading: false,\n  username: null,\n  country: null,\n  startDate: null,\n  endDate: null\n};\n\nconst authStart = (state, action) => {\n  console.log(\"staaaart\");\n  return updateObject(state, {\n    error: null,\n    loading: true\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    token: action.token,\n    error: null,\n    loading: false,\n    username: action.username\n  });\n};\n\nconst authFail = (state, action) => {\n  return updateObject(state, {\n    error: action.error,\n    loading: false\n  });\n};\n\nconst authLogout = (state, action) => {\n  return updateObject(state, {\n    token: null\n  });\n};\n\nconst newTrip = (state, action) => {\n  alert(action.startDate);\n  alert(action.endDate);\n  return updateObject(state, {\n    country: action.country,\n    startDate: action.startDate,\n    endDate: action.endDate\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n\n    case actionTypes.AUTH_FAIL:\n      return authFail(state, action);\n\n    case actionTypes.AUTH_LOGOUT:\n      return authLogout(state, action);\n\n    case actionTypes.NEW_TRIP:\n      return newTrip(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/store/reducers/reducer.js"],"names":["actionTypes","updateObject","initialState","token","error","loading","username","country","startDate","endDate","authStart","state","action","console","log","authSuccess","authFail","authLogout","newTrip","alert","reducer","type","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","NEW_TRIP"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE,IADa;AAEpBC,EAAAA,KAAK,EAAE,IAFa;AAGpBC,EAAAA,OAAO,EAAE,KAHW;AAIpBC,EAAAA,QAAQ,EAAE,IAJU;AAMpBC,EAAAA,OAAO,EAAE,IANW;AAOpBC,EAAAA,SAAS,EAAE,IAPS;AAQpBC,EAAAA,OAAO,EAAE;AARW,CAArB;;AAWA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAOb,YAAY,CAACU,KAAD,EAAQ;AAC1BP,IAAAA,KAAK,EAAE,IADmB;AAE1BC,IAAAA,OAAO,EAAE;AAFiB,GAAR,CAAnB;AAIA,CAND;;AAQA,MAAMU,WAAW,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AAC1BR,IAAAA,KAAK,EAAES,MAAM,CAACT,KADY;AAE1BC,IAAAA,KAAK,EAAE,IAFmB;AAG1BC,IAAAA,OAAO,EAAE,KAHiB;AAI1BC,IAAAA,QAAQ,EAAEM,MAAM,CAACN;AAJS,GAAR,CAAnB;AAMA,CAPD;;AASA,MAAMU,QAAQ,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACnC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AAC1BP,IAAAA,KAAK,EAAEQ,MAAM,CAACR,KADY;AAE1BC,IAAAA,OAAO,EAAE;AAFiB,GAAR,CAAnB;AAIA,CALD;;AAOA,MAAMY,UAAU,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAOX,YAAY,CAACU,KAAD,EAAQ;AAC1BR,IAAAA,KAAK,EAAE;AADmB,GAAR,CAAnB;AAGA,CAJD;;AAMA,MAAMe,OAAO,GAAG,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAClCO,EAAAA,KAAK,CAACP,MAAM,CAACJ,SAAR,CAAL;AACAW,EAAAA,KAAK,CAACP,MAAM,CAACH,OAAR,CAAL;AACA,SAAOR,YAAY,CAACU,KAAD,EAAQ;AAC1BJ,IAAAA,OAAO,EAAEK,MAAM,CAACL,OADU;AAE1BC,IAAAA,SAAS,EAAEI,MAAM,CAACJ,SAFQ;AAG1BC,IAAAA,OAAO,EAAEG,MAAM,CAACH;AAHU,GAAR,CAAnB;AAKA,CARD;;AAUA,MAAMW,OAAO,GAAG,CAACT,KAAK,GAACT,YAAP,EAAqBU,MAArB,KAAgC;AAC/C,UAAOA,MAAM,CAACS,IAAd;AACC,SAAKrB,WAAW,CAACsB,UAAjB;AAA6B,aAAOZ,SAAS,CAACC,KAAD,EAAQC,MAAR,CAAhB;;AAC7B,SAAKZ,WAAW,CAACuB,YAAjB;AAA+B,aAAOR,WAAW,CAACJ,KAAD,EAAQC,MAAR,CAAlB;;AAC/B,SAAKZ,WAAW,CAACwB,SAAjB;AAA4B,aAAOR,QAAQ,CAACL,KAAD,EAAQC,MAAR,CAAf;;AAC5B,SAAKZ,WAAW,CAACyB,WAAjB;AAA8B,aAAOR,UAAU,CAACN,KAAD,EAAQC,MAAR,CAAjB;;AAE9B,SAAKZ,WAAW,CAAC0B,QAAjB;AAA2B,aAAOR,OAAO,CAACP,KAAD,EAAQC,MAAR,CAAd;;AAC3B;AACC,aAAOD,KAAP;AARF;AAUA,CAXD;;AAaA,eAAeS,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {\n\ttoken: null,\n\terror: null,\n\tloading: false,\n\tusername: null,\n\n\tcountry: null,\n\tstartDate: null,\n\tendDate: null\n}\n\nconst authStart = (state, action) => {\n\tconsole.log(\"staaaart\");\n\treturn updateObject(state, {\n\t\terror: null,\n\t\tloading: true\n\t});\n}\n\nconst authSuccess = (state, action) => {\n\treturn updateObject(state, {\n\t\ttoken: action.token,\n\t\terror: null,\n\t\tloading: false,\n\t\tusername: action.username\n\t});\n}\n\nconst authFail = (state, action) => {\n\treturn updateObject(state, {\n\t\terror: action.error,\n\t\tloading: false\n\t});\n}\n\nconst authLogout = (state, action) => {\n\treturn updateObject(state, {\n\t\ttoken: null\n\t});\n}\n\nconst newTrip = (state, action) => {\n\talert(action.startDate);\n\talert(action.endDate);\n\treturn updateObject(state, {\n\t\tcountry: action.country,\n\t\tstartDate: action.startDate,\n\t\tendDate: action.endDate\n\t})\n}\n\nconst reducer = (state=initialState, action) => {\n\tswitch(action.type) {\n\t\tcase actionTypes.AUTH_START: return authStart(state, action);\n\t\tcase actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\n\t\tcase actionTypes.AUTH_FAIL: return authFail(state, action);\n\t\tcase actionTypes.AUTH_LOGOUT: return authLogout(state, action);\n\n\t\tcase actionTypes.NEW_TRIP: return newTrip(state, action);\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}