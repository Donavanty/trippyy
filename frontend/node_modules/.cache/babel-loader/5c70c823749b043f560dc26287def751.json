{"ast":null,"code":"var _jsxFileName = \"/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/Containers/MyTrips.jsx\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/actions';\nimport NavBar from '../Components/navBar';\nimport { Spinner } from 'react-bootstrap';\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\";\n\nclass MyTrips extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tripIDs: [],\n      trips: [],\n      local_loading: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      local_loading: true\n    }); //Updates login status to redux.\n\n    this.props.onTryAutoSignup(); //If user is not logged in, redirect to Login page\n\n    if (localStorage.getItem('token') == null || localStorage.getItem('token') == undefined) {\n      this.props.history.push({\n        pathname: \"/login\",\n        state: {\n          from: this.props.location.pathname\n        }\n      });\n    } // Loads trips from backend assuming logged in, catch doesnt handle!\n    // Need to add checks \n\n\n    try {\n      axios.get(DATABASE_URL + \"api/users/\" + localStorage.userId, {\n        headers: {\n          Authorization: \"Token \" + localStorage.token\n        }\n      }).then(res => {\n        this.setState({\n          tripIDs: res.data.trips\n        });\n      }).then(res => {\n        for (let id of this.state.tripIDs) {\n          axios.get(DATABASE_URL + \"api/trips/\" + id, {\n            headers: {\n              Authorization: \"Token \" + localStorage.token\n            }\n          }).then(res => {\n            this.setState({\n              trips: [...this.state.trips, res.data]\n            });\n          });\n        }\n      }).then(res => {// this.setState({local_loading: false});\n      });\n    } catch (error) {\n      alert(error);\n      this.props.history.push(\"/\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      from: this.props.location.pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron startBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 3\n      }\n    }, \" My Trips \"), this.state.local_loading ? /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, \"Loading...\")) : this.state.trips.length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }\n    }, this.state.trips.map((value, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 45\n      }\n    }, \" \", value.tripName, \" \"))) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }\n    }, \" No trips available \")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.token !== null,\n    username: state.username\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckedState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/Containers/MyTrips.jsx"],"names":["React","Component","axios","connect","actions","NavBar","Spinner","DATABASE_URL","MyTrips","state","tripIDs","trips","local_loading","componentDidMount","setState","props","onTryAutoSignup","localStorage","getItem","undefined","history","push","pathname","from","location","get","userId","headers","Authorization","token","then","res","data","id","error","alert","render","length","map","value","index","tripName","mapStateToProps","isAuthenticated","username","mapDispatchToProps","dispatch","authCheckedState"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/actions';\nimport NavBar from '../Components/navBar';\nimport { Spinner } from 'react-bootstrap';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\";\n\nclass MyTrips extends Component {\n\tstate = {\n\t\ttripIDs: [],\n\t\ttrips: [],\n\t\tlocal_loading: null\n\t}\n\tcomponentDidMount() {\n\n\t\tthis.setState({local_loading: true});\n\n\t\t//Updates login status to redux.\n\t\tthis.props.onTryAutoSignup();\n\n\t\t//If user is not logged in, redirect to Login page\n\t\tif (localStorage.getItem('token') == null || localStorage.getItem('token') == undefined) {\n\t\t\tthis.props.history.push({\n\t\t\t\t\tpathname: \"/login\",\n\t\t\t\t\tstate: { from: this.props.location.pathname }\n\t\t\t\t});\n\t\t}\n\n\t\t// Loads trips from backend assuming logged in, catch doesnt handle!\n\t\t// Need to add checks \n\t\ttry {\n\t\t\taxios.get(DATABASE_URL + \"api/users/\" + localStorage.userId, {\n\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t}).then(res => {\n\t\t\t\tthis.setState({tripIDs: res.data.trips});\n\t\t\t}).then(res => {\n\t\t\t\tfor (let id of this.state.tripIDs) {\n\t\t\t\t\taxios.get(DATABASE_URL + \"api/trips/\" + id, \n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t\t\t}).then( res => {\n\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t{trips: [...this.state.trips, res.data]}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\t\n\t\t\t\t}\n\t\t\t}).then(res => {\n\t\t\t\t// this.setState({local_loading: false});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\talert(error);\n\t\t\tthis.props.history.push(\"/\");\n\t\t}\n\t}\n\nrender() {\n\treturn (\n\t\t<React.Fragment>\n\t\t<NavBar from={this.props.location.pathname}/>\n\t\t<div className = \"jumbotron startBox\">\n\t\t<h1> My Trips </h1>\n\n\t\t{ \n\t\t\tthis.state.local_loading ? \n\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t  <span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t:\n\t\t\t\t(this.state.trips.length > 0) ? \n\t\t\t\t\t<ul>\n\t\t\t\t\t{this.state.trips.map((value,index) => <li key={index}> {value.tripName} </li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t: \n\t\t\t\t\t<p> No trips available </p>\n\t\t\t\t\n\t\t}\n\t\t</div>\n\n\t\t</React.Fragment> \n\t\t);\n}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tisAuthenticated: state.token !== null,\n\t\tusername: state.username\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckedState()),\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);"]},"metadata":{},"sourceType":"module"}