{"ast":null,"code":"var _jsxFileName = \"/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/Containers/MyTrips.jsx\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/actions';\nimport NavBar from '../Components/navBar';\n\nclass MyTrips extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tripIDs: [],\n      trips: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.onTryAutoSignup(); // Loads trips from backend ASSUME LOGGED IN!!\n\n    axios.get(\"http://127.0.0.1:8000/api/users/\" + localStorage.userId, {\n      headers: {\n        Authorization: \"Token \" + localStorage.token\n      }\n    }).then(res => {\n      this.setState({\n        tripIDs: res.data.trips\n      });\n    }).then(res => {\n      for (let id of this.state.tripIDs) {\n        axios.get(\"http://127.0.0.1:8000/api/trips/\" + id, {\n          headers: {\n            Authorization: \"Token \" + localStorage.token\n          }\n        }).then(res => {\n          this.setState({\n            trips: [...this.state.trips, res.data]\n          });\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  } //stopped here\n\n\n  render() {\n    if (loading) {\n      return null;\n    }\n\n    ;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 4\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron startBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, \" My Trips \"), this.state.trips.length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, this.state.trips.map((value, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 47\n      }\n    }, \" \", value.tripName, \" \"))) : /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 6\n      }\n    }, \" No trips available \")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    // Basic stats needed for NAV ------------\n    isAuthenticated: state.token !== null,\n    username: state.username // Basic stats needed for NAV ------------\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // Basic stats needed for NAV ------------\n    onTryAutoSignup: () => dispatch(actions.authCheckedState()),\n    logout: () => dispatch(actions.logouted()) // Basic stats needed for NAV ------------\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/Containers/MyTrips.jsx"],"names":["React","Component","axios","connect","actions","NavBar","MyTrips","state","tripIDs","trips","loading","componentDidMount","props","onTryAutoSignup","get","localStorage","userId","headers","Authorization","token","then","res","setState","data","id","render","length","map","value","index","tripName","mapStateToProps","isAuthenticated","username","mapDispatchToProps","dispatch","authCheckedState","logout","logouted"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/actions';\nimport NavBar from '../Components/navBar'\n\n\nclass MyTrips extends Component {\n\tstate = {\n\t\ttripIDs: [],\n\t\ttrips: [],\n\t\tloading: true\n\t}\n\tcomponentDidMount() {\n\t\tthis.props.onTryAutoSignup();\n\n\t\t// Loads trips from backend ASSUME LOGGED IN!!\n\t\taxios.get(\"http://127.0.0.1:8000/api/users/\"+localStorage.userId, {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t}).then(res => {\n\t\t\tthis.setState({tripIDs: res.data.trips});\n\t\t\t}).then(res => {\n\t\t\t\tfor (let id of this.state.tripIDs) {\n\t\t\t\t\taxios.get(\"http://127.0.0.1:8000/api/trips/\" + id, \n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t\t\t}).then( res => {\n\t\t\t\t\t\tthis.setState(\n  \t\t\t\t\t\t\t{trips: [...this.state.trips, res.data]}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\t\n\t\t\t\t}\n\t\t\t\tthis.setState({loading: false});\n\t\t});\n\n\t\t\n\n\t}\n//stopped here\n\trender() {\n\t\tif (loading) { return null };\n\t\treturn (\n\t\t<React.Fragment>\n\t\t\t<NavBar {...this.props}/>\n\t\t\t<div className = \"jumbotron startBox\">\n\t\t\t\t<h1> My Trips </h1>\n\t\t\t\t{\n\t\t\t\t\t(this.state.trips.length > 0) ? \n\t\t\t\t\t\t<ul>\n\n\t\t\t\t\t\t\t{this.state.trips.map((value,index) => <li key={index}> {value.tripName} </li>)}\n\n\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t: \n\t\t\t\t\t<h1> No trips available </h1>\n\t\t\t\t}\n\t\t\t</div>\n\n\t\t</React.Fragment> \n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tisAuthenticated: state.token !== null,\n\t\tusername: state.username\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckedState()),\n\t\tlogout: () => dispatch(actions.logouted())\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);"]},"metadata":{},"sourceType":"module"}