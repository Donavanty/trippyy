{"ast":null,"code":"var _jsxFileName = \"/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/Containers/MyTrips.jsx\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/actions';\nimport NavBar from '../Components/navBar';\n\nclass MyTrips extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tripIDs: [],\n      trips: [],\n      local_loading: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      local_loading: true\n    }); //Updates login status to redux.\n\n    this.props.onTryAutoSignup(); //If user is not logged in, redirect to Login page\n\n    if (localStorage.getItem('token') == null) {\n      this.props.history.push({\n        pathname: \"/login\",\n        state: {\n          from: this.props.location.pathname\n        }\n      });\n    } // Loads trips from backend assuming logged in.\n    // Need to add checks \n\n\n    try {\n      axios.get(\"http://127.0.0.1:8000/api/users/\" + localStorage.userId, {\n        headers: {\n          Authorization: \"Token \" + localStorage.token\n        }\n      }).then(res => {\n        this.setState({\n          tripIDs: res.data.trips\n        });\n      }).then(res => {\n        for (let id of this.state.tripIDs) {\n          axios.get(\"http://127.0.0.1:8000/api/trips/\" + id, {\n            headers: {\n              Authorization: \"Token \" + localStorage.token\n            }\n          }).then(res => {\n            alert(\"ad\");\n            this.setState({\n              trips: [...this.state.trips, res.data]\n            });\n          });\n        }\n\n        alert(\"ad\");\n        this.setState({\n          local_loading: false\n        });\n      });\n    } catch (error) {\n      alert(error);\n      this.props.history.push(\"/\");\n    }\n  }\n\n  render() {\n    if (this.state.local_loading) {\n      return null;\n    }\n\n    ;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      from: this.props.location.pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron startBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 3\n      }\n    }, \" My Trips \"), this.state.trips.length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 4\n      }\n    }, this.state.trips.map((value, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 43\n      }\n    }, \" \", value.tripName, \" \"))) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 4\n      }\n    }, \" No trips available \")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    // Basic stats needed for NAV ------------\n    isAuthenticated: state.token !== null,\n    username: state.username // Basic stats needed for NAV ------------\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // Basic stats needed for NAV ------------\n    onTryAutoSignup: () => dispatch(actions.authCheckedState()),\n    logout: () => dispatch(actions.logouted()) // Basic stats needed for NAV ------------\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/Containers/MyTrips.jsx"],"names":["React","Component","axios","connect","actions","NavBar","MyTrips","state","tripIDs","trips","local_loading","componentDidMount","setState","props","onTryAutoSignup","localStorage","getItem","history","push","pathname","from","location","get","userId","headers","Authorization","token","then","res","data","id","alert","error","render","length","map","value","index","tripName","mapStateToProps","isAuthenticated","username","mapDispatchToProps","dispatch","authCheckedState","logout","logouted"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAGA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC/BM,KAD+B,GACvB;AACPC,MAAAA,OAAO,EAAE,EADF;AAEPC,MAAAA,KAAK,EAAE,EAFA;AAGPC,MAAAA,aAAa,EAAE;AAHR,KADuB;AAAA;;AAM/BC,EAAAA,iBAAiB,GAAG;AAEnB,SAAKC,QAAL,CAAc;AAACF,MAAAA,aAAa,EAAE;AAAhB,KAAd,EAFmB,CAInB;;AACA,SAAKG,KAAL,CAAWC,eAAX,GALmB,CAOnB;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,IAArC,EAA2C;AAC1C,WAAKH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,QAAAA,QAAQ,EAAE,QADY;AAEtBZ,QAAAA,KAAK,EAAE;AAAEa,UAAAA,IAAI,EAAE,KAAKP,KAAL,CAAWQ,QAAX,CAAoBF;AAA5B;AAFe,OAAxB;AAIA,KAbkB,CAenB;AACA;;;AACA,QAAI;AACHjB,MAAAA,KAAK,CAACoB,GAAN,CAAU,qCAAmCP,YAAY,CAACQ,MAA1D,EAAkE;AACjEC,QAAAA,OAAO,EAAE;AAACC,UAAAA,aAAa,EAAE,WAAWV,YAAY,CAACW;AAAxC;AADwD,OAAlE,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACd,aAAKhB,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAEoB,GAAG,CAACC,IAAJ,CAASpB;AAAnB,SAAd;AACA,OAJD,EAIGkB,IAJH,CAIQC,GAAG,IAAI;AACd,aAAK,IAAIE,EAAT,IAAe,KAAKvB,KAAL,CAAWC,OAA1B,EAAmC;AAClCN,UAAAA,KAAK,CAACoB,GAAN,CAAU,qCAAqCQ,EAA/C,EACA;AACCN,YAAAA,OAAO,EAAE;AAACC,cAAAA,aAAa,EAAE,WAAWV,YAAY,CAACW;AAAxC;AADV,WADA,EAGGC,IAHH,CAGSC,GAAG,IAAI;AACfG,YAAAA,KAAK,CAAC,IAAD,CAAL;AACA,iBAAKnB,QAAL,CACC;AAACH,cAAAA,KAAK,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,KAAf,EAAsBmB,GAAG,CAACC,IAA1B;AAAR,aADD;AAGA,WARD;AASA;;AACDE,QAAAA,KAAK,CAAC,IAAD,CAAL;AACA,aAAKnB,QAAL,CAAc;AAACF,UAAAA,aAAa,EAAE;AAAhB,SAAd;AACA,OAlBD;AAmBA,KApBD,CAoBE,OAAOsB,KAAP,EAAc;AACfD,MAAAA,KAAK,CAACC,KAAD,CAAL;AACA,WAAKnB,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACA;AACD;;AAEFe,EAAAA,MAAM,GAAG;AACR,QAAI,KAAK1B,KAAL,CAAWG,aAAf,EAA8B;AAAE,aAAO,IAAP;AAAa;;AAAA;AAC7C,wBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,KAAKG,KAAL,CAAWQ,QAAX,CAAoBF,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAEA;AAAK,MAAA,SAAS,EAAG,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,EAGE,KAAKZ,KAAL,CAAWE,KAAX,CAAiByB,MAAjB,GAA0B,CAA3B,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAK3B,KAAL,CAAWE,KAAX,CAAiB0B,GAAjB,CAAqB,CAACC,KAAD,EAAOC,KAAP,kBAAiB;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAkBD,KAAK,CAACE,QAAxB,MAAtC,CAFD,CADA,gBASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAZD,CAFA,CADD;AAqBA;;AAxE+B;;AA2EhC,MAAMC,eAAe,GAAIhC,KAAD,IAAW;AAClC,SAAO;AACN;AACAiC,IAAAA,eAAe,EAAEjC,KAAK,CAACmB,KAAN,KAAgB,IAF3B;AAGNe,IAAAA,QAAQ,EAAElC,KAAK,CAACkC,QAHV,CAIN;;AAJM,GAAP;AAMA,CAPD;;AASA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACtC,SAAO;AACN;AACA7B,IAAAA,eAAe,EAAE,MAAM6B,QAAQ,CAACvC,OAAO,CAACwC,gBAAR,EAAD,CAFzB;AAGNC,IAAAA,MAAM,EAAE,MAAMF,QAAQ,CAACvC,OAAO,CAAC0C,QAAR,EAAD,CAHhB,CAIN;;AAJM,GAAP;AAMA,CAPD;;AAQA,eAAe3C,OAAO,CAACoC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpC,OAA7C,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/actions';\nimport NavBar from '../Components/navBar'\n\n\nclass MyTrips extends Component {\n\tstate = {\n\t\ttripIDs: [],\n\t\ttrips: [],\n\t\tlocal_loading: null\n\t}\n\tcomponentDidMount() {\n\n\t\tthis.setState({local_loading: true});\n\n\t\t//Updates login status to redux.\n\t\tthis.props.onTryAutoSignup();\n\n\t\t//If user is not logged in, redirect to Login page\n\t\tif (localStorage.getItem('token') == null) {\n\t\t\tthis.props.history.push({\n\t\t\t\t\tpathname: \"/login\",\n\t\t\t\t\tstate: { from: this.props.location.pathname }\n\t\t\t\t});\n\t\t}\n\n\t\t// Loads trips from backend assuming logged in.\n\t\t// Need to add checks \n\t\ttry {\n\t\t\taxios.get(\"http://127.0.0.1:8000/api/users/\"+localStorage.userId, {\n\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t}).then(res => {\n\t\t\t\tthis.setState({tripIDs: res.data.trips});\n\t\t\t}).then(res => {\n\t\t\t\tfor (let id of this.state.tripIDs) {\n\t\t\t\t\taxios.get(\"http://127.0.0.1:8000/api/trips/\" + id, \n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {Authorization: \"Token \" + localStorage.token}\n\t\t\t\t\t}).then( res => {\n\t\t\t\t\t\talert(\"ad\");\n\t\t\t\t\t\tthis.setState(\n\t\t\t\t\t\t\t{trips: [...this.state.trips, res.data]}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t});\t\n\t\t\t\t}\n\t\t\t\talert(\"ad\");\n\t\t\t\tthis.setState({local_loading: false});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\talert(error);\n\t\t\tthis.props.history.push(\"/\");\n\t\t}\n\t}\n\nrender() {\n\tif (this.state.local_loading) { return null };\n\treturn (\n\t\t<React.Fragment>\n\t\t<NavBar from={this.props.location.pathname}/>\n\t\t<div className = \"jumbotron startBox\">\n\t\t<h1> My Trips </h1>\n\t\t{\n\t\t\t(this.state.trips.length > 0) ? \n\t\t\t<ul>\n\n\t\t\t{this.state.trips.map((value,index) => <li key={index}> {value.tripName} </li>)}\n\n\t\t\t</ul>\n\n\t\t\t: \n\n\t\t\t<p> No trips available </p>\n\t\t}\n\t\t</div>\n\n\t\t</React.Fragment> \n\t\t);\n}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tisAuthenticated: state.token !== null,\n\t\tusername: state.username\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\t// Basic stats needed for NAV ------------\n\t\tonTryAutoSignup: () => dispatch(actions.authCheckedState()),\n\t\tlogout: () => dispatch(actions.logouted())\n\t\t// Basic stats needed for NAV ------------\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTrips);"]},"metadata":{},"sourceType":"module"}