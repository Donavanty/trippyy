{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"; // Sends an action to reducer to change loading to true.\n\nexport const authStarted = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccessed = (token, username, userId) => {\n  return {\n    token: token,\n    type: actionTypes.AUTH_SUCCESS,\n    username: username,\n    userId: userId\n  };\n};\nexport const authFailed = error => {\n  return {\n    error: error,\n    type: actionTypes.AUTH_FAIL\n  };\n};\nexport const logouted = () => {\n  localStorage.removeItem('username');\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('tripCountry');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const notLoggedIn = () => {\n  localStorage.removeItem('username');\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeouted = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logouted());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogined = (username, password) => {\n  return dispatch => {\n    dispatch(authStarted());\n    axios.post(DATABASE_URL + 'api/authenticate/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.token;\n      const userId = res.data.id;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('username', username);\n      localStorage.setItem('userId', userId);\n      dispatch(authSuccessed(token, username, userId));\n      dispatch(checkAuthTimeouted(3600));\n    }).catch(err => {\n      dispatch(authFailed(err));\n    });\n  };\n};\nexport const authSignuped = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStarted());\n    axios.post(DATABASE_URL + 'rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      dispatch(authLogined(username, password1));\n    }).catch(err => {\n      dispatch(authFailed(err));\n    });\n  };\n};\nexport const authCheckedState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n\n    if (token === undefined || token === null) {\n      dispatch(notLoggedIn());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logouted());\n      } else {\n        dispatch(authSuccessed(token, username));\n        dispatch(checkAuthTimeouted((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}; // ---------------------------------------------------------------------------------\n\nexport const newTripData = (tripCountry, startDate, endDate) => {\n  const data = {\n    destination: tripCountry,\n    tripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n    startDate: startDate,\n    endDate: endDate\n  };\n  axios.post(DATABASE_URL + 'api/trips/', data, {\n    headers: {\n      Authorization: \"Token \" + localStorage.token\n    }\n  }).then(res => console.log(res));\n  localStorage.setItem('tripCountry', tripCountry);\n  localStorage.setItem('startDate', startDate);\n  localStorage.setItem('endDate', endDate);\n  return {\n    type: actionTypes.NEW_TRIP,\n    tripCountry: tripCountry,\n    startDate: startDate,\n    endDate: endDate\n  };\n};\nexport const newTrip = (tripCountry, startDate, endDate) => {\n  return dispatch => {\n    dispatch(authStarted());\n    dispatch(newTripData(tripCountry, startDate, endDate));\n  };\n};","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/store/actions/actions.js"],"names":["actionTypes","axios","DATABASE_URL","authStarted","type","AUTH_START","authSuccessed","token","username","userId","AUTH_SUCCESS","authFailed","error","AUTH_FAIL","logouted","localStorage","removeItem","AUTH_LOGOUT","notLoggedIn","checkAuthTimeouted","expirationTime","dispatch","setTimeout","authLogined","password","post","then","res","data","id","expirationDate","Date","getTime","setItem","catch","err","authSignuped","email","password1","password2","authCheckedState","getItem","undefined","newTripData","tripCountry","startDate","endDate","destination","tripName","headers","Authorization","console","log","NEW_TRIP","newTrip"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"\n\n// Sends an action to reducer to change loading to true.\nexport const authStarted = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\nexport const authSuccessed = (token, username, userId) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\tusername: username,\n\t\tuserId: userId\n\t}\n}\n\nexport const authFailed = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\nexport const logouted = () => {\n\tlocalStorage.removeItem('username');\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('userId');\n\tlocalStorage.removeItem('tripCountry');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const notLoggedIn = () => {\n\tlocalStorage.removeItem('username');\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('userId');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const checkAuthTimeouted = expirationTime => {\n\treturn dispatch => {\n\t\tsetTimeout( () => {\n\t\t\tdispatch(logouted());\n\t\t}, expirationTime * 1000)\n\t}\n}\nexport const authLogined = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'api/authenticate/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.token;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t\tlocalStorage.setItem('userId', userId);\n\t\t\tdispatch(authSuccessed(token, username, userId));\n\t\t\tdispatch(checkAuthTimeouted(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\nexport const authSignuped = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tdispatch(authLogined(username, password1));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\nexport const authCheckedState = () => {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst username = localStorage.getItem('username');\n\t\tif (token === undefined || token === null) {\n\t\t\tdispatch(notLoggedIn());\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\tif (expirationDate <= new Date() ) {\n\t\t\t\tdispatch(logouted());\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccessed(token, username));\n\t\t\t\tdispatch(checkAuthTimeouted( (expirationDate.getTime() - new Date().getTime()) / 1000 ));\n\t\t\t}\n\n\t\t}\n\t}\t\n}\n\n// ---------------------------------------------------------------------------------\n\nexport const newTripData = (tripCountry, startDate, endDate) => {\n\tconst data = {\n\t\t\t\tdestination: tripCountry,\n\t\t\t\ttripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n\t\t\t\tstartDate: startDate,\n\t\t\t\tendDate: endDate\n\t\t\t}\n\taxios.post(DATABASE_URL + 'api/trips/', data, {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token},\n\t\t}).then(res => console.log(res));\n\tlocalStorage.setItem('tripCountry', tripCountry);\n\tlocalStorage.setItem('startDate', startDate);\n\tlocalStorage.setItem('endDate', endDate);\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttripCountry: tripCountry,\n\t\tstartDate: startDate,\n\t\tendDate: endDate,\n\t}\n\n}\n\nexport const newTrip = (tripCountry, startDate, endDate) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\tdispatch(newTripData(tripCountry, startDate, endDate));\n\t}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}