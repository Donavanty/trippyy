{"ast":null,"code":"import*as actionTypes from'./actionTypes';import axios from'axios';var DATABASE_URL=\"https://trippyy-backend.herokuapp.com/\";// Sends an action to reducer to change loading to true.\nexport var authStarted=function authStarted(){return{type:actionTypes.AUTH_START};};// Sends an action to reducer to update REDUX token, username, userId upon login.\nexport var authSuccessed=function authSuccessed(token,username,userId){return{token:token,type:actionTypes.AUTH_SUCCESS,username:username,userId:userId};};// Sends an action to alert an error.\nexport var authFailed=function authFailed(error){return{error:error,type:actionTypes.AUTH_FAIL};};// Called upon logout, removes everything in LOCALSTORAGE \nexport var logouted=function logouted(){localStorage.clear();return{type:actionTypes.AUTH_LOGOUT};};// Called during checking of authentication state, updates REDUX token, remove all USER attributes in LOCALSTORAGE\nexport var notLoggedIn=function notLoggedIn(){localStorage.removeItem('username');localStorage.removeItem('user');localStorage.removeItem('expirationDate');localStorage.removeItem('token');localStorage.removeItem('userId');return{type:actionTypes.AUTH_LOGOUT};};export var checkAuthTimeouted=function checkAuthTimeouted(expirationTime){return function(dispatch){setTimeout(function(){dispatch(logouted());},expirationTime*1000);};};// Called upon login, logins by checking with backend, updates USER attributes in LOCALSTORAGE, \n// and calls authSuccessed or authFailed, depending on outcome.\nexport var authLogined=function authLogined(username,password){return function(dispatch){dispatch(authStarted());axios.post(DATABASE_URL+'api/authenticate/',{username:username,password:password}).then(function(res){var token=res.data.token;var userId=res.data.id;var expirationDate=new Date(new Date().getTime()+3600*1000);localStorage.setItem('token',token);localStorage.setItem('expirationDate',expirationDate);localStorage.setItem('username',username);localStorage.setItem('userId',userId);dispatch(authSuccessed(token,username,userId));dispatch(checkAuthTimeouted(3600));}).catch(function(err){dispatch(authFailed(err));});};};// Signs up by sending POST req to backend, then calls authLogined.\nexport var authSignuped=function authSignuped(username,email,password1,password2){return function(dispatch){dispatch(authStarted());axios.post(DATABASE_URL+'rest-auth/registration/',{username:username,email:email,password1:password1,password2:password2}).then(function(res){dispatch(authLogined(username,password1));}).catch(function(err){dispatch(authFailed(err));});};};// Checks with LOCALSTORAGE (token) if user is logged in, and updates REDUX token accordingly.\nexport var authCheckedState=function authCheckedState(){return function(dispatch){var token=localStorage.getItem('token');var username=localStorage.getItem('username');if(token===undefined||token===null){dispatch(notLoggedIn());}else{var expirationDate=new Date(localStorage.getItem('expirationDate'));if(expirationDate<=new Date()){dispatch(logouted());}else{dispatch(authSuccessed(token,username));dispatch(checkAuthTimeouted((expirationDate.getTime()-new Date().getTime())/1000));}}};};// ---------------------------------------------------------------------------------\n// Stores trip variables into local storage, POSTS data if logined, and updates redux state for trip.\nexport var newTripData=function newTripData(tripCountry,tripLat,tripLng,startDate,endDate){var data={destination:tripCountry,tripName:\"Trip to \"+tripCountry+\" from \"+startDate+\" to \"+endDate,startDate:startDate,endDate:endDate};axios.post(DATABASE_URL+'api/trips/',data,{headers:{Authorization:\"Token \"+localStorage.token}}).then(function(res){return console.log(res);});var trip={'country':tripCountry,'lat':tripLat,'lng':tripLng,'startDate':startDate,'endDate':endDate};localStorage.setItem('trip',JSON.stringify(trip));return{type:actionTypes.NEW_TRIP,trip:trip};};// Calls authStarted to change REDUX loading to true, then proceeds on to call newTripData.\nexport var newTrip=function newTrip(tripCountry,tripLat,tripLng,startDate,endDate){return function(dispatch){dispatch(authStarted());dispatch(newTripData(tripCountry,tripLat,tripLng,startDate,endDate));};};//Gets trip details from local storage\nexport var checkedTrip=function checkedTrip(){return{type:actionTypes.NEW_TRIP,trip:JSON.parse(localStorage.trip)};};","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy-working/trippyy/frontend/src/store/actions/actions.js"],"names":["actionTypes","axios","DATABASE_URL","authStarted","type","AUTH_START","authSuccessed","token","username","userId","AUTH_SUCCESS","authFailed","error","AUTH_FAIL","logouted","localStorage","clear","AUTH_LOGOUT","notLoggedIn","removeItem","checkAuthTimeouted","expirationTime","dispatch","setTimeout","authLogined","password","post","then","res","data","id","expirationDate","Date","getTime","setItem","catch","err","authSignuped","email","password1","password2","authCheckedState","getItem","undefined","newTripData","tripCountry","tripLat","tripLng","startDate","endDate","destination","tripName","headers","Authorization","console","log","trip","JSON","stringify","NEW_TRIP","newTrip","checkedTrip","parse"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nconst DATABASE_URL = \"https://trippyy-backend.herokuapp.com/\"\n\n// Sends an action to reducer to change loading to true.\nexport const authStarted = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\n// Sends an action to reducer to update REDUX token, username, userId upon login.\nexport const authSuccessed = (token, username, userId) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\tusername: username,\n\t\tuserId: userId\n\t}\n}\n\n// Sends an action to alert an error.\nexport const authFailed = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\n// Called upon logout, removes everything in LOCALSTORAGE \nexport const logouted = () => {\n\tlocalStorage.clear();\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\n// Called during checking of authentication state, updates REDUX token, remove all USER attributes in LOCALSTORAGE\nexport const notLoggedIn = () => {\n\tlocalStorage.removeItem('username');\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('userId');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const checkAuthTimeouted = expirationTime => {\n\treturn dispatch => {\n\t\tsetTimeout( () => {\n\t\t\tdispatch(logouted());\n\t\t}, expirationTime * 1000)\n\t}\n}\n\n// Called upon login, logins by checking with backend, updates USER attributes in LOCALSTORAGE, \n// and calls authSuccessed or authFailed, depending on outcome.\nexport const authLogined = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'api/authenticate/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.token;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t\tlocalStorage.setItem('userId', userId);\n\t\t\tdispatch(authSuccessed(token, username, userId));\n\t\t\tdispatch(checkAuthTimeouted(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\n// Signs up by sending POST req to backend, then calls authLogined.\nexport const authSignuped = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post(DATABASE_URL + 'rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tdispatch(authLogined(username, password1));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\n// Checks with LOCALSTORAGE (token) if user is logged in, and updates REDUX token accordingly.\nexport const authCheckedState = () => {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst username = localStorage.getItem('username');\n\t\tif (token === undefined || token === null) {\n\t\t\tdispatch(notLoggedIn());\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\tif (expirationDate <= new Date() ) {\n\t\t\t\tdispatch(logouted());\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccessed(token, username));\n\t\t\t\tdispatch(checkAuthTimeouted( (expirationDate.getTime() - new Date().getTime()) / 1000 ));\n\t\t\t}\n\n\t\t}\n\t}\t\n}\n\n// ---------------------------------------------------------------------------------\n\n// Stores trip variables into local storage, POSTS data if logined, and updates redux state for trip.\nexport const newTripData = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\tconst data = {\n\t\t\t\tdestination: tripCountry,\n\t\t\t\ttripName: \"Trip to \" + tripCountry + \" from \" + startDate + \" to \" + endDate,\n\t\t\t\tstartDate: startDate,\n\t\t\t\tendDate: endDate\n\t\t\t}\n\taxios.post(DATABASE_URL + 'api/trips/', data, {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token},\n\t\t}).then(res => console.log(res));\n\n\tconst trip = {\n\t\t'country' : tripCountry,\n\t\t'lat' : tripLat,\n\t\t'lng' : tripLng,\n\t\t'startDate' : startDate,\n\t\t'endDate' : endDate,\n\t}\n\tlocalStorage.setItem('trip', JSON.stringify(trip));\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttrip: trip\n\t}\n\n}\n\n// Calls authStarted to change REDUX loading to true, then proceeds on to call newTripData.\nexport const newTrip = (tripCountry, tripLat, tripLng, startDate, endDate) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\tdispatch(newTripData(tripCountry, tripLat, tripLng, startDate, endDate));\n\t}\n}\n\n//Gets trip details from local storage\nexport const checkedTrip = () => {\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\ttrip: JSON.parse(localStorage.trip)\n\t}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}