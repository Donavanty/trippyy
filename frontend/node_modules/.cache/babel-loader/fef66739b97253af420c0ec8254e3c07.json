{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStarted = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccessed = (token, username, userId) => {\n  return {\n    token: token,\n    type: actionTypes.AUTH_SUCCESS,\n    username: username,\n    userId: userId\n  };\n};\nexport const authFailed = error => {\n  return {\n    error: error,\n    type: actionTypes.AUTH_FAIL\n  };\n};\nexport const logouted = () => {\n  localStorage.removeItem('username');\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeouted = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logouted());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogined = (username, password) => {\n  return dispatch => {\n    dispatch(authStarted());\n    axios.post('http://127.0.0.1:8000/api/authenticate/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.token;\n      const userId = res.data.id;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('username', username);\n      localStorage.setItem('userId', userId);\n      dispatch(authSuccessed(token, username, userId));\n      dispatch(checkAuthTimeouted(3600));\n    }).catch(err => {\n      dispatch(authFailed(err));\n    });\n  };\n};\nexport const authSignuped = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStarted());\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const userId = res.data.id;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('username', username);\n      localStorage.setItem('userId', userId);\n      dispatch(authSuccessed(token, username, userId));\n      dispatch(checkAuthTimeouted(3600));\n    }).catch(err => {\n      dispatch(authFailed(err));\n    });\n  };\n};\nexport const authCheckedState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n\n    if (token === undefined) {\n      dispatch(logouted());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logouted());\n      } else {\n        dispatch(authSuccessed(token, username));\n        dispatch(checkAuthTimeouted((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}; // ---------------------------------------------------------------------------------\n\nexport const newTrip = (country, startDate, endDate) => {\n  axios.post('http://127.0.0.1:8000/api/trips/', {\n    headers: {\n      Authorization: \"Token \" + localStorage.token\n    },\n    destination: country,\n    tripName: \"mytrip\",\n    startDate: startDate,\n    endDate: endDate\n  }).then(res => alert(res));\n  alert(\"done\");\n  localStorage.setItem('country', country);\n  localStorage.setItem('startDate', startDate);\n  localStorage.setItem('endDate', endDate);\n  return {\n    type: actionTypes.NEW_TRIP,\n    country: country,\n    startDate: startDate,\n    endDate: endDate\n  };\n};","map":{"version":3,"sources":["/Users/lixupeng/NUS ACADS/ORBITAL/trippyy/frontend/[REACT] trippyy/src/store/actions/actions.js"],"names":["actionTypes","axios","authStarted","type","AUTH_START","authSuccessed","token","username","userId","AUTH_SUCCESS","authFailed","error","AUTH_FAIL","logouted","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeouted","expirationTime","dispatch","setTimeout","authLogined","password","post","then","res","data","id","expirationDate","Date","getTime","setItem","catch","err","authSignuped","email","password1","password2","key","authCheckedState","getItem","undefined","newTrip","country","startDate","endDate","headers","Authorization","destination","tripName","alert","NEW_TRIP"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStarted = () => {\n\treturn {\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\nexport const authSuccessed = (token, username, userId) => {\n\treturn {\n\t\ttoken: token,\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\tusername: username,\n\t\tuserId: userId\n\t}\n}\n\nexport const authFailed = (error) => {\n\treturn {\n\t\terror: error,\n\t\ttype: actionTypes.AUTH_FAIL\n\t}\n}\n\nexport const logouted = () => {\n\tlocalStorage.removeItem('username');\n\tlocalStorage.removeItem('user');\n\tlocalStorage.removeItem('expirationDate');\n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('userId');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t}\n}\n\nexport const checkAuthTimeouted = expirationTime => {\n\treturn dispatch => {\n\t\tsetTimeout( () => {\n\t\t\tdispatch(logouted());\n\t\t}, expirationTime * 1000)\n\t}\n}\nexport const authLogined = (username, password) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post('http://127.0.0.1:8000/api/authenticate/', {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}).then(res => {\n\t\t\tconst token = res.data.token;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t\tlocalStorage.setItem('userId', userId);\n\t\t\tdispatch(authSuccessed(token, username, userId));\n\t\t\tdispatch(checkAuthTimeouted(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\nexport const authSignuped = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\tdispatch(authStarted());\n\t\taxios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n\t\t\tusername: username,\n\t\t\temail: email,\n\t\t\tpassword1: password1,\n\t\t\tpassword2: password2\n\t\t}).then(res => {\n\t\t\tconst token = res.data.key;\n\t\t\tconst userId = res.data.id;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t\tlocalStorage.setItem('userId', userId);\n\t\t\tdispatch(authSuccessed(token, username, userId));\n\t\t\tdispatch(checkAuthTimeouted(3600));\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFailed(err))\n\t\t})\n\t}\n}\n\nexport const authCheckedState = () => {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token');\n\t\tconst username = localStorage.getItem('username');\n\t\tif (token === undefined) {\n\t\t\tdispatch(logouted());\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\tif (expirationDate <= new Date() ) {\n\t\t\t\tdispatch(logouted());\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccessed(token, username));\n\t\t\t\tdispatch(checkAuthTimeouted( (expirationDate.getTime() - new Date().getTime()) / 1000 ));\n\t\t\t}\n\n\t\t}\n\t}\t\n}\n\n// ---------------------------------------------------------------------------------\n\nexport const newTrip = (country, startDate, endDate) => {\n\taxios.post('http://127.0.0.1:8000/api/trips/', {\n\t\t\theaders: {Authorization: \"Token \" + localStorage.token},\n\t\t\tdestination: country,\n\t\t\ttripName: \"mytrip\",\n\t\t\tstartDate: startDate,\n\t\t\tendDate: endDate\t\n\t\t}).then(res => alert(res));\n\talert(\"done\");\n\tlocalStorage.setItem('country', country);\n\tlocalStorage.setItem('startDate', startDate);\n\tlocalStorage.setItem('endDate', endDate);\n\treturn {\n\t\ttype: actionTypes.NEW_TRIP,\n\t\tcountry: country,\n\t\tstartDate: startDate,\n\t\tendDate: endDate\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}